{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfd7 GitLabForm","text":"<p>is a specialized configuration as a code tool for GitLab:</p> <ul> <li>application settings,</li> <li>groups,</li> <li>projects,</li> </ul> <p>...and more using hierarchical configuration written in YAML.</p>"},{"location":"#why","title":"Why?","text":""},{"location":"#short-and-powerful-syntax","title":"Short and powerful syntax","text":"<p>A lot of features with a little amount of YAML thanks to the hierarchical configuration with inheritance, merging/overwriting and additivity . <pre><code>projects_and_groups:\n  # configuration shared by all projects in a group named 'a_group'...\n  a_group/*:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: true\n  # ...except this project that has a different config:\n  a_group/a_special_project:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: false\n</code></pre></p>"},{"location":"#dynamic-features","title":"Dynamic features","text":"<p>GitLab introduces new features monthly. You can often use them in GitLabForm without upgrading the app because we pass some parameters as-is to GitLab APIs with PUT/POST requests. <pre><code>projects_and_groups:\n  a_group/a_project:\n    project_settings:\n      # ALL the keys described at\n      # https://docs.gitlab.com/ee/api/projects.html#edit-project\n      # can be provided here\n</code></pre></p>"},{"location":"#stability","title":"Stability","text":"<p>We treat our users the way we would like to be treated by other software projects maintainers:</p> <ul> <li>We follow semver and don't allow existing features behavior changes in minor or patch versions.</li> <li>Before changing the syntax we start printing deprecation warnings in the versions before.</li> <li>We use versioning of the configuration syntax for major changes and provide step-by-step upgrade guidelines.</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>Let's assume that you want to add a deployment key to all projects in a group \"My Group\" (with path \"my-group\"). If so then:</p> <ol> <li>Create a <code>config.yml</code> file with:</li> </ol> <pre><code>config_version: 3\n\ngitlab:\n  url: https://gitlab.yourcompany.com\n  # alternatively use the GITLAB_TOKEN environment variable for this\n  token: \"&lt;private token OR an OAuth2 access token of an admin user&gt;\"\n\nprojects_and_groups:\n  my-group/*:\n    deploy_keys:\n      a_friendly_deploy_key_name:  # this name is only used in GitLabForm config\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3WiHAsm2UTz2dU1vKFYUGfHI1p5fIv84BbtV/9jAKvZhVHDqMa07PgVtkttjvDC8bA1kezhOBKcO0KNzVoDp0ENq7WLxFyLFMQ9USf8LmOY70uV/l8Gpcn1ZT7zRBdEzUUgF/PjZukqVtuHqf9TCO8Ekvjag9XRfVNadKs25rbL60oqpIpEUqAbmQ4j6GFcfBBBPuVlKfidI6O039dAnDUsmeafwCOhEvQmF+N5Diauw3Mk+9TMKNlOWM+pO2DKxX9LLLWGVA9Dqr6dWY0eHjWKUmk2B1h1HYW+aUyoWX2TGsVX9DlNY7CKiQGsL5MRH9IXKMQ8cfMweKoEcwSSXJ\n        title: ssh_key_name_that_is_shown_in_gitlab\n        can_push: false\n</code></pre> <p>Alternatively, create a <code>config.yml</code> file with setting <code>GITLAB_URL</code> &amp; <code>GITLAB_TOKEN</code> as environment variables</p> <pre><code>config_version: 3\n\nprojects_and_groups:\n  my-group/*:\n    deploy_keys:\n      a_friendly_deploy_key_name:  # this name is only used in GitLabForm config\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3WiHAsm2UTz2dU1vKFYUGfHI1p5fIv84BbtV/9jAKvZhVHDqMa07PgVtkttjvDC8bA1kezhOBKcO0KNzVoDp0ENq7WLxFyLFMQ9USf8LmOY70uV/l8Gpcn1ZT7zRBdEzUUgF/PjZukqVtuHqf9TCO8Ekvjag9XRfVNadKs25rbL60oqpIpEUqAbmQ4j6GFcfBBBPuVlKfidI6O039dAnDUsmeafwCOhEvQmF+N5Diauw3Mk+9TMKNlOWM+pO2DKxX9LLLWGVA9Dqr6dWY0eHjWKUmk2B1h1HYW+aUyoWX2TGsVX9DlNY7CKiQGsL5MRH9IXKMQ8cfMweKoEcwSSXJ\n        title: ssh_key_name_that_is_shown_in_gitlab\n        can_push: false\n</code></pre> <ol> <li>Run: <pre><code>docker run -it -v $(pwd):/config ghcr.io/gitlabform/gitlabform:latest gitlabform my-group\n</code></pre></li> <li>Watch GitLabForm add this deploy key to all projects in \"My Group\" group in your GitLab!</li> </ol>"},{"location":"#used-by","title":"Used by","text":"<p>  ...and many more!</p>"},{"location":"#license","title":"License","text":"<p>The app code is licensed under the MIT license. A few scripts in <code>dev/</code> directory are licensed under the MPL 2.0 license.</p> <p>GitLab is a registered trademark of GitLab, Inc. This application is not endorsed by GitLab and is not affiliated with GitLab in any way.</p> <p>The GitLabForm logo is based on the GitLab logos available here, and like the original art is licensed under the Creative Commons Attribution Non-Commercial ShareAlike 4.0 International License.</p> <p>All the logos shown in the \"Home\" section of this documentation belong to their respective owners.</p>"},{"location":"UPGRADING/","title":"UPGRADING","text":"<p>Please see the upgrade guide in the new website.</p>"},{"location":"automation/","title":"Automation","text":""},{"location":"automation/#running-in-an-automated-pipeline","title":"Running in an automated pipeline","text":"<p>You can use GitLabForm as a part of your CCA (Continuous Configuration Automation) pipeline.</p> <p>You can run it with a schedule on <code>ALL_DEFINED</code> or <code>ALL</code> projects to unify your GitLab configuration, after it may have drifted from the configuration. For example you may allow the users to reconfigure projects during their working hours but automate cleaning up the drift each night.</p> <p>An example <code>.gitlab-ci.yml</code> for running GitLabForm using GitLab CI is provided here: <pre><code>image: ghcr.io/gitlabform/gitlabform:latest\n\nsome_project:\n  only:\n    changes:\n    - config.yml\n  script: gitlabform my-group/subgroup/project\n\nmy_whole_other_group:\n  only:\n    changes:\n    - other-config.yml\n  script: gitlabform -c other-config.yml my_whole_other_group\n</code></pre></p> <p>Note that as a standard best practice you should not put your GitLab access token in your <code>config.yml</code> (unless it is encrypted) for security reasons - please set it in the <code>GITLAB_TOKEN</code> environment variable instead.</p> <p>For GitLab CI a secure place to set it would be a Protected Variable in the project configuration.</p>"},{"location":"automation/#running-automatically-for-new-projects","title":"Running automatically for new projects","text":"<p>(* - Why do we provide a how-to only for the new projects and not groups?</p> <p>Because we assume that there is no big need to automate configuring new groups as if you add a config for a new group to GitLabForm, then it's hard to forget to actually run it...)</p>"},{"location":"automation/#using-system-hooks","title":"Using system hooks","text":"<p>Probably all the methods to achieve this will use GitLab system hooks feature which makes GitLab perform HTTP POST request on - among other ones - these events:</p> <ul> <li><code>project_create</code></li> <li><code>project_rename</code> - we want this because after the rename project may get a new config from GitLabForm,</li> <li><code>project_transfer</code> - we want this because under a new group the project may get a new config from GitLabForm,</li> </ul>"},{"location":"automation/#method-1-gitlabform-on-the-same-server-as-gitlab-adnanhwebhook-app","title":"Method 1: GitLabForm on the same server as GitLab + adnanh/webhook app","text":"<p>In this method we assume that:</p> <ul> <li>you have GitLabForm installed on the same server as your GitLab instance.<ul> <li>its binary is here: <code>/opt/gitlabform/venv/bin/gitlabform</code>.</li> <li>its config is in <code>/opt/gitlabform/conf</code> - <code>config.yml</code> plus some files for the <code>files:</code> sections.</li> </ul> </li> </ul>"},{"location":"automation/#step-1-configure-gitlab-system-hooks","title":"Step 1: Configure GitLab system hooks","text":"<p>Go to https://gitlab.your-company.com/admin/hooks and create a hook with the URL http://127.0.0.1:9000/hooks/run-gitlabform . Uncheck all the extra triggers as the events that are interesting for us are among the standard ones. Leave \"Enable SSL verification\" unchecked as we are making calls over loopback, there is no need to encrypt the traffic here.</p>"},{"location":"automation/#step-2-configure-the-webhook-app-to-run-gitlabform","title":"Step 2: Configure the webhook app to run GitLabForm","text":"<p>Get and install the adnanh/webhook app.</p> <p>Create this pretty self-explaining config:</p> <pre><code>---\n- id: run-gitlabform\n  execute-command: \"/opt/gitlabform/venv/bin/gitlabform\"\n  command-working-directory: \"/opt/gitlabform/conf\"\n  pass-arguments-to-command:\n  - source: payload\n    name: path_with_namespace\n  trigger-rule:\n    match:\n      type: regex\n      regex: \"(project_create|project_rename|project_transfer)\"\n      parameter:\n        source: payload\n        name: event_name\n</code></pre> <p>...and save it as <code>hooks.yaml</code>.</p> <p>Run webhook app with:</p> <pre><code>./webhook -hooks path/to/your/hooks.yaml -ip 127.0.0.1 -verbose\n</code></pre> <p>...and keep it running.</p> <p>(In the long term you should make this permanent with a systemd service/other way appropriate to your distro.)</p>"},{"location":"automation/#step-3-test","title":"Step 3: Test","text":"<p>Create a project with a config defined in your GitLabForm config and watch the output of webhook app. It should look like this:</p> <pre><code>[webhook] 2021/01/25 19:24:56 incoming HTTP request from 127.0.0.1:56822\n[webhook] 2021/01/25 19:24:56 run-gitlabform got matched\n[webhook] 2021/01/25 19:24:56 200 | 180.402\u00b5s | 127.0.0.1:5000 | POST /hooks/run-gitlabform\n[webhook] 2021/01/25 19:24:58 command output: *** # of groups to process: 0\n*** # of projects to process: 1\n* [1/1] Processing: your-group/your-project\n(...)\nGitLabForm version: 1.20.0 (the latest)\n[webhook] 2021/01/25 19:24:58 finished handling run-gitlabform\n</code></pre> <p>- congrats! This means that it works! \ud83c\udf89</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#424","title":"4.2.4","text":""},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Improves logging within labels processor</li> </ul>"},{"location":"changelog/#423","title":"4.2.3","text":""},{"location":"changelog/#fixes_1","title":"Fixes","text":"<ul> <li>Fix labels get deleted and recreated if the key in YAML does not match the name in YAML or Gitlab #1004, TimKnight-DWP</li> </ul>"},{"location":"changelog/#422","title":"4.2.2","text":""},{"location":"changelog/#fixes_2","title":"Fixes","text":"<ul> <li>Fix a 404 error when labels_processor attempts to delete labels set on parent group(s) #1003, TimKnight-DWP</li> </ul>"},{"location":"changelog/#421","title":"4.2.1","text":""},{"location":"changelog/#fixes_3","title":"Fixes","text":"<ul> <li>Improved logging in Labels processor #1002, TimKnight-DWP</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Document preference for using python-gitlab #73, #988 gdubicki</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#420","title":"4.2.0","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add the possibility to add group level webhooks #919, szEvEz</li> <li>Add Project Security Settings support #922, szEvEz</li> </ul>"},{"location":"changelog/#tests","title":"Tests","text":"<ul> <li>Get rid of warnings about unregistered test markers gdubicki</li> <li>Handle flaky test in test_files #961, gdubicki</li> <li>Fix issues with eventual consistency in tests and cover an mr_approval_rules use case #969, TimKnight-DWP</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Improving the Features listings and local dev instructions, gdubicki</li> <li>Correct info on how to run a single test method gdubicki</li> </ul>"},{"location":"changelog/#code-style","title":"Code Style","text":"<ul> <li>Implement <code>black</code> formatting #959, gdubicki</li> </ul>"},{"location":"changelog/#build-ci","title":"Build / CI","text":"<ul> <li>CI: separate steps of starting GitLab in Docker and running acceptance tests gdubicki</li> <li>Improved pyproject.toml #945, gdubicki</li> <li>Ensure that the app keeps running on MacOS and Windows #958, gdubicki</li> </ul>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#413","title":"4.1.3","text":""},{"location":"changelog/#fixes_4","title":"Fixes","text":"<ul> <li>fix: project topics should not be removed if topics are not in the config #954 (amimas)</li> </ul>"},{"location":"changelog/#refactors","title":"Refactors","text":"<ul> <li>refactor: migrate 'merge_requests_approvals' processor to python-gitlab #955 (amimas)</li> </ul>"},{"location":"changelog/#build-ci_1","title":"Build / CI","text":"<ul> <li>chore(dev): add options in dev script to use gitlab-ce #941 (@Jimisola)</li> <li>chore: migrate project to pyproject.toml #943 (Greg Dubicki)</li> <li>tests: stablize intermittent failure from TestFiles acceptance tests #956 (amimas)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>docs: update v4.1.2 changelog #947 (amimas)</li> </ul>"},{"location":"changelog/#dependencies_2","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#412","title":"4.1.2","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>feat: Add enhanced support for managing project topics #931 (@Jimisola)</li> </ul>"},{"location":"changelog/#fixes_5","title":"Fixes","text":"<ul> <li>fix: respect skip_groups when applying group configurations #939 (rickbrouwer)</li> </ul>"},{"location":"changelog/#refactors_1","title":"Refactors","text":"<ul> <li>refactor: update 'project_settings_processor' to use python-gitlab #929 (amimas)</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>chore: update base image to Alpine 3.21 #930 (rroesch1)</li> <li>chore(ci): configure dependabot to group python-gitlab packages #935 (amimas)</li> </ul>"},{"location":"changelog/#dependencies_3","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#411","title":"4.1.1","text":""},{"location":"changelog/#refactors_2","title":"Refactors","text":"<ul> <li>refactor: migrate project push rules processor to python-gitlab #923 (amimas).</li> <li>This PR refactors the processor used for managing project level push rules. The methods for managing this resource is removed and switched to use python-gitlab.</li> </ul>"},{"location":"changelog/#acceptance-tests","title":"Acceptance Tests","text":"<ul> <li>test: add author email regex acceptance test #924 (Tim Knight (DWP)).</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#410","title":"4.1.0","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>feat: add support for group push rules #911 (szEvEz).</li> </ul>"},{"location":"changelog/#refactors_3","title":"Refactors","text":"<ul> <li>refactor: use python-gitlab when checking Bot user #921 (Tim Knight (DWP)).</li> <li>means only one API call when enforcing members</li> <li>fully cached</li> <li>should remove exceptions for missing Users - as old REST api was throwing them too</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#407","title":"4.0.7","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>fix: remove caching on get_user_id_cached #918 (Tim Knight (DWP)).</li> <li>the get user by username is already cached, so this reduces redundant data in the cache</li> <li>adds extra logging to help users debug effectively</li> </ul>"},{"location":"changelog/#refactors_4","title":"Refactors","text":"<ul> <li>refactor: do not throw exception from get_user_id #918 (Tim Knight (DWP)).</li> <li>pass None up and let upstream throw exception if it wants</li> </ul>"},{"location":"changelog/#dependencies_4","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#406","title":"4.0.6","text":""},{"location":"changelog/#refactors_5","title":"Refactors","text":"<ul> <li>use graphql to get member_roles to reduce permission level required #915, relates to Gitlab Issue 511919 (Tim Knight (DWP)).</li> <li>graph ql GET member_roles only needs Guest+ permissions</li> <li>REST requires significantly higher permission sets which not all users maybe comfortable running with   -\u00a0 improve error handling and logging when users etc are not found</li> </ul>"},{"location":"changelog/#405","title":"4.0.5","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>fix: gracefully handle \"missing\" Users when trying to remove from Project or Group #913, closes #912 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#build-fixes","title":"Build Fixes","text":"<ul> <li>test: mark 'TestVariables::test__builds_disabled' as skipped #909 (amimas)   <pre><code>GitLab API behaviour changed in current latest version (17.7.0) for listing project ci variables. \nThis is causing test failure and blocking changes from merging. The API changes do not have any breaking impact for gitlabform. \nSo, marking the currently failing test to be skipped. \nIt can be re-enabled again based on findings from the issue created in GitLab's backlog at https://gitlab.com/gitlab-org/gitlab/-/issues/511237\n</code></pre></li> </ul>"},{"location":"changelog/#dependencies_5","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#404","title":"4.0.4","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>reduce unnecessary commits when modifying files #892, closes #891 (Tim Knight (DWP))</li> <li>wildcard based branch protection config fails to apply #887 (KieranSt97)</li> </ul>"},{"location":"changelog/#dependencies_6","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#403","title":"4.0.3","text":""},{"location":"changelog/#performance","title":"Performance","text":"<ul> <li>Reduce execution time due to project members config #885 (amimas)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Fix Gitlab System hooks doc link #883 (Philippe Granet)</li> </ul>"},{"location":"changelog/#dependencies_7","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#402","title":"4.0.2","text":""},{"location":"changelog/#performance_1","title":"Performance","text":"<ul> <li>Reduce execution time of branch processor #878 (amimas)</li> </ul>"},{"location":"changelog/#refactors_6","title":"Refactors","text":"<ul> <li>Migrate branches processor to python-gitlab #876 (amimas)</li> <li>Migrate files processor to python-gitlab #874 (amimas)</li> </ul>"},{"location":"changelog/#build-process","title":"Build Process","text":"<ul> <li>Fix codecov notification 8e89932 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#dependencies_8","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#401","title":"4.0.1","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>fix: project settings failing to apply because membership config is not processed #857, closes #765. (amimas)</li> </ul>"},{"location":"changelog/#400","title":"4.0.0","text":""},{"location":"changelog/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li>Stop supporting Python older than 3.12 #789, closes #754. (Greg Dubicki) </li> </ul>"},{"location":"changelog/#dependencies_9","title":"Dependencies","text":"<ul> <li>Update various dependencies reliant on dropping python3.8 support; to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3165","title":"3.16.5","text":""},{"location":"changelog/#dependencies_10","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul>"},{"location":"changelog/#3164","title":"3.16.4","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>fix: print out to info level - user being processed #864, closes #863 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#refactors_7","title":"Refactors","text":"<ul> <li>refactor: migrate 'resource_groups' config to be managed by python-gitlab #854, closes #628 (amimas)</li> </ul>"},{"location":"changelog/#dependencies_11","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3163","title":"3.16.3","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>fix: only unprotect branch right before protecting again #830 (Chris Hill)</li> <li>fix: VariablesProcessor._print_diff() got an unexpected keyword argument 'diff_only_changed' #852, closes #851 (kriko)</li> </ul>"},{"location":"changelog/#dependencies_12","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3162","title":"3.16.2","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>fix: iterates through project list to check and add members #843. Resolves 836. (Sachin Kumar Singh) </li> </ul>"},{"location":"changelog/#dependencies_13","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul>"},{"location":"changelog/#3161","title":"3.16.1","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>fix: Adding members who already exist in project #840. Resolves 836. (Tim Knight (DWP)) </li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>fix \"Edit a project webhook\" Gitlab link #839 (Philippe Granet)</li> </ul>"},{"location":"changelog/#3160","title":"3.16.0","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Run gitlabform for a single group and all it's subgroups #828, closes 613. (Patrick Del Conte)</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>return all members when listing for member processor #838 (Jack Hindley)</li> <li>fix error when --diff-only-changed is set, but no changes are present #833 (Arden Shackelford)</li> <li>remove 'enforce' key from the config so that it's not treated as a \"variable\" #831 (Philippe Granet)</li> </ul>"},{"location":"changelog/#dependencies_14","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3150","title":"3.15.0","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add flag to only print settings that are being changed #815 (Arden Shackelford)</li> </ul>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Idempotent updating for SAML Group Links #824 (ItsJustMagic)</li> </ul>"},{"location":"changelog/#refactors_8","title":"Refactors","text":"<ul> <li>Moving members and members_processor to use python-gitlab #822 (Arden Shackelford)</li> </ul>"},{"location":"changelog/#build-process_1","title":"Build Process","text":"<ul> <li>Switch to Trusted Publishing to PyPi #805 (Greg Dubicki)</li> <li>Cleanup tests to avoid multiple issue tracking integrations being enabled #820 (Arden Shackelford)</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>Add new feature docs to navigation of docs about various configuration options #812 (amimas)</li> </ul>"},{"location":"changelog/#dependencies_15","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3141","title":"3.14.1","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Enhanced cron expressions for scheduled pipelines. PRs #800, 801, implements #455. (Mirko Friedenhagen)</li> <li>Show dry-run mode in the output header, if set. PR #798. (Sebastian Gumprich)</li> </ul>"},{"location":"changelog/#build-process_2","title":"Build Process","text":"<ul> <li>Remove grafana from test GitLab instance. (Tim Knight (DWP))</li> <li>Stop running setup.py directly, it's deprecated. (Greg Dubicki)</li> </ul>"},{"location":"changelog/#dependencies_16","title":"Dependencies","text":"<ul> <li>Update various dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3140","title":"3.14.0","text":"<p>(Not released because of a build issue, ugh.)</p>"},{"location":"changelog/#3132","title":"3.13.2","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug fixes","text":"<ul> <li>Fix custom roles for GitLab SaaS users. PR #787. (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#dependencies_17","title":"Dependencies","text":"<ul> <li>Update packaging, cryptography, pytest, types-request, coverage and python-gitlab to newer versions.</li> </ul>"},{"location":"changelog/#3131","title":"3.13.1","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug fixes","text":"<ul> <li>Fix documentation to publish website</li> </ul>"},{"location":"changelog/#3130","title":"3.13.0","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add support for setting custom roles (Ultimate only) in project and group members. Creation of custom roles in gitlabform is NOT SUPPORTED. #673. PR 759, 775. (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>Add info about and link to pyenv PR #774, (Jimisola Laursen)</li> </ul>"},{"location":"changelog/#build-process_3","title":"Build Process","text":"<ul> <li>Improvements to codecov reports 43adfb9b. (Tim Knight (DWP))</li> <li>Fixes to PRs workflows to ensure tests/linters run on branch. 7cd1bfc3 &amp; c373b54. (Tim Knight (DWP))</li> <li>Adds suite of Acceptance Tests using Ultimate License. d33b0928. (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#dependencies_18","title":"Dependencies","text":"<ul> <li>Update certifi, coverage, requests, types-requests to newer versions.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3120","title":"3.12.0","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>support for group SAML links, closes #549, PR #760 (mahadevan-karthi-dwp)</li> <li>support for CI/CD Job Token Scope #571, PR #758 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#dependencies_19","title":"Dependencies","text":"<ul> <li>Update py-test, python-gitlab, dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#3111-2024-05-16","title":"3.11.1 (2024-05-16)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>release process and deploy container to GHCR (741ff75)</li> </ul>"},{"location":"changelog/#3110-2024-05-15","title":"3.11.0 (2024-05-15)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>add option to not fail if configured resource group does not exist (#650) (a362d8e), closes #649</li> <li>manage Project and Group Labels via gitlabform (#751) (f1be42b)</li> <li>use python lib for group settings (#746) (03ce3fa)</li> </ul>"},{"location":"changelog/#documentation_7","title":"Documentation","text":"<ul> <li>add fixes info into changelog for release 3.10.0 (96a39ee)</li> <li>move commit message guideline (c0d3f68)</li> </ul>"},{"location":"changelog/#3100","title":"3.10.0","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add support for Application Settings #120, PR #742 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#refactors_9","title":"Refactors","text":"<ul> <li>Use new convenience methods for getting groups and projects in more places and document them in the contribution docs: PRs #734, #743 (Tim Knight (DWP))</li> </ul>"},{"location":"changelog/#dependencies_20","title":"Dependencies","text":"<ul> <li>Update some dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#397","title":"3.9.7","text":""},{"location":"changelog/#fixes_6","title":"Fixes","text":"<ul> <li>Processing group fails if it has more than 20 members #732, PR #735 (Sachin Kumar Singh )</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#396","title":"3.9.6","text":""},{"location":"changelog/#fixes_7","title":"Fixes","text":"<ul> <li>Process all schedules and not only the first 20 #731 (Andreas Wirooks)</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#395","title":"3.9.5","text":""},{"location":"changelog/#fixes_8","title":"Fixes","text":"<ul> <li>Error when running with <code>--noop</code> and <code>--output-file</code> parameter and config contains project to be transferred #729 (long-wan-ep)</li> </ul>"},{"location":"changelog/#refactors_10","title":"Refactors","text":"<ul> <li>Migrate <code>schedules</code> (pipeline schedules) configuration to use python-gitlab library #706 (TimKnight-Opencast)</li> <li>Migrate <code>group_members</code> configuration to use python-gitlab library #697 (TimKnight-DWP)</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#394","title":"3.9.4","text":""},{"location":"changelog/#fixes_9","title":"Fixes","text":"<ul> <li>Dry run failure when project transfer is configured along with other additional configs #726 (long-wan-ep)</li> </ul>"},{"location":"changelog/#chores","title":"Chores","text":"<ul> <li>Update badge in project readme commit (gdubicki)</li> </ul>"},{"location":"changelog/#dependencies_21","title":"Dependencies","text":"<ul> <li>Update some dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#393","title":"3.9.3","text":""},{"location":"changelog/#fixes_10","title":"Fixes","text":"<ul> <li>Run app from Docker as non-root #719 (lkwg82)</li> </ul>"},{"location":"changelog/#dependencies_22","title":"Dependencies","text":"<ul> <li>Update some dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#392","title":"3.9.2","text":""},{"location":"changelog/#fixes_11","title":"Fixes","text":"<ul> <li>Transfer project not working when target is ALL or ALL_DEFINED or group or subgroup #714 (long-wan-ep)</li> </ul>"},{"location":"changelog/#documentation_8","title":"Documentation","text":"<ul> <li>Fix branches keyword in MR approval rules #710 (tmeijn)</li> </ul>"},{"location":"changelog/#dependencies_23","title":"Dependencies","text":"<ul> <li>Update some dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#391","title":"3.9.1","text":""},{"location":"changelog/#fixes_12","title":"Fixes","text":"<ul> <li>Hooks processing fails when config includes token #693 (amimas)</li> </ul>"},{"location":"changelog/#ci","title":"CI","text":"<ul> <li>Install setuptools in github workflow to fix release process commit (amimas)</li> </ul>"},{"location":"changelog/#dependencies_24","title":"Dependencies","text":"<ul> <li>Update some dependencies to newer version.</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#390","title":"3.9.0","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Ability to transfer projects between groups or namespaces #582 (amimas)</li> <li>Add support for Python 3.12 and update to alpine 3.18 #612 (gdubicki)</li> <li>Add <code>enforce</code> support for project hooks/webhooks configuration #664(TigreModerata)</li> </ul>"},{"location":"changelog/#fixes_13","title":"Fixes","text":"<ul> <li>JSON data with dates not serialized correctly #656 (HontoNoRoger)</li> </ul>"},{"location":"changelog/#refactors_11","title":"Refactors","text":"<ul> <li>Migrate <code>archive</code> configuration to use python-gitlab library #622 (amimas)</li> <li>Migrate <code>hooks</code> configuration feature to use python-gitlab library #635 (TigreModerata)</li> <li>Migrate <code>tags</code> configuration to use python-gitlab library #642 (lhokktyn)</li> </ul>"},{"location":"changelog/#documentation_9","title":"Documentation","text":"<ul> <li>Clarify gitlabform release procedure steps #600 (amimas)</li> <li>Add users' logs to the repo to fix problems with diplaying them commit (gdubicki)</li> <li>Fix broken links to references in homepage #653 (alamirault)</li> </ul>"},{"location":"changelog/#dependencies_25","title":"Dependencies","text":"<ul> <li>Update many dependencies to newer version.</li> </ul>"},{"location":"changelog/#styles","title":"Styles","text":"<ul> <li>Update formats using latest version of <code>black</code> (v24.1.1) #681 (amimas)</li> </ul> <p>Thanks to all the contributors of this release!</p>"},{"location":"changelog/#380","title":"3.8.0","text":"<ul> <li>Add <code>allowed_to_create</code> support for tag protection. PR #551, implements #505.</li> <li>Require Python version &gt;= 3.8 (as 3.7 is EOL since June 2023) and update dependencies that have required it. PR #592, implements #576.</li> <li>Usernames in projects and groups should be case-insensitive. PR #556, implements #555.</li> <li>Update many dependencies to newer version.</li> <li>Various fixes to local dev, tests, and CI of gitlabform.</li> </ul> <p>Thanks to the contributors of this release::</p> <ul> <li>amimas</li> <li>J4Numbers</li> <li>gdubicki</li> </ul>"},{"location":"changelog/#370","title":"3.7.0","text":"<ul> <li>Add <code>enforce</code> support to managing pipeline schedules. PR #561, implements #539.</li> <li>Fix group membership failing to apply when using <code>keep_bots</code> attribute. PR #554, fixes #553.</li> </ul> <p>Thanks to the contributors of this release:</p> <ul> <li>amimas</li> <li>Sachin Kumar Singh</li> </ul>"},{"location":"changelog/#361","title":"3.6.1","text":"<ul> <li>Fix acceptance tests after GitLab v16 started to require expiration date for all the tokens. PR #557 and d2b0c81.</li> <li>Dependencies update.</li> </ul> <p>Thanks to amimas for his contribution!</p>"},{"location":"changelog/#360","title":"3.6.0","text":"<ul> <li>Enforcing project and group members while keeping the bot users is now easier. When using <code>enforce: true</code> add also <code>keep_bots: true</code> at the same level. See the docs for more info. Implements #454, PR #544.</li> <li>(For contributors) All acceptance tests have been rewritten to use python-gitlab as a first step towards moving the whole project to use it instead of own home-grown library for the GitLab API. PR #442.</li> </ul> <p>BIG thanks the contributions of this release:</p> <ul> <li>Nejc Habjan for his enormous work on migrating the tests to python-gitlab,</li> <li>James Gauld for brilliantly implementing <code>keep_bots: true</code>,</li> <li>Rajas Gujarathi for multiple improvements to the docs,</li> <li>Waldek Maleska for contribution to docs.</li> </ul>"},{"location":"changelog/#350","title":"3.5.0","text":"<ul> <li>Make running with <code>ALL</code> work fast when using gitlab.com or a self-hosted GitLab instance and a non-admin account. With a non-admin account the app will not try to get all the groups and projects, but only the ones where the used account has at least a Reporter role, which is the lowest level of permissions that allow to make a configuration change. Fixes #509, PR #518.</li> <li>Improved contribution docs. PR #515.</li> </ul> <p>Thanks to Mirko Friedenhagen for his contribution!</p>"},{"location":"changelog/#343","title":"3.4.3","text":"<ul> <li>Fix: add missing support for using group name when protecting an environment. Fixes #503, PR #506. </li> </ul>"},{"location":"changelog/#342","title":"3.4.2","text":"<ul> <li>Improve the reliability in some cases (PR #497):</li> <li>retrying the whole section for a given entity (f.e. <code>files</code> for a project <code>foo/bar</code>) when it fails on a non-retryable individual HTTP request,</li> <li>retrying individual HTTP requests on errors that may be returned by gitlab.com's CloudFlare CDN (520-531).</li> </ul>"},{"location":"changelog/#341","title":"3.4.1","text":"<ul> <li>Fix for old merge request syntax using inheritance when a sole <code>approvals_before_merge</code> setting is inherited/overwritten. PR #481.</li> </ul>"},{"location":"changelog/#340","title":"3.4.0","text":"<ul> <li>Add support for multiple merge request approval rules and for changing the name of the currently managed single approval rule. Implements #388 and #95, PR #435 and many more.</li> <li>A more user-friendly error message when a key is not found. PR #422</li> <li>Start to edit instead of remove+re-add users as project and group members when changing their access level or expiration time. This should give cleaner audit logs of membership changes and may resolve some issues. Related to issue #466, PR #469.</li> <li>Operate on simple dicts and lists instead of more complex ordereddict and CommentedSeq for easier to understand debug output and tests.</li> <li>Show the config before and after the internal transformation stage, with the debug output enabled.</li> <li>(For contributors) Big refactoring to make the code more logically groupped and contribution documentation updates for easier contributions. Please see the commit messages in the PR #431 for more information.</li> </ul> <p>Thanks to the following contributors of this release:</p> <ul> <li>Waldek Maleska, amimas, Jimisola Laursen, Siythrun for consulting and testing of the multiple merge request approval rules feature, </li> <li>Rafael Zanella for the development.</li> </ul>"},{"location":"changelog/#340rc4","title":"3.4.0rc4","text":"<ul> <li>Fix internal conversion of group names and usernames to ids in some cases for Merge Request approval rules. Reported by Siythrun in issue #388, PR #467.</li> <li>Operate on simple dicts and lists instead of more complex ordereddict and CommentedSeq for easier to understand debug output and tests.</li> <li>Show the config before and after the internal transformation stage, with the debug output enabled.</li> </ul>"},{"location":"changelog/#334","title":"3.3.4","text":"<ul> <li>Fix unnecessary reapply of branch protection when <code>*_access_levels</code> is set to <code>0</code>. PR #474</li> </ul> <p>Thanks to Ben Kuhar for his contribution!</p>"},{"location":"changelog/#340rc3","title":"3.4.0rc3","text":"<ul> <li>Start to edit instead of remove+re-add users as project and group members when changing their access level or expiration time. This should give cleaner audit logs of membership changes and may resolve some issues. Related to issue #466, PR #469.</li> </ul>"},{"location":"changelog/#333","title":"3.3.3","text":"<ul> <li>Fix bug on the first run when both adding project members and the same users as merge request approvers. Fixes #461.</li> </ul>"},{"location":"changelog/#340rc2","title":"3.4.0rc2","text":"<ul> <li>A more user-friendly error message when a key is not found. PR #422</li> <li>Fix for converting legacy merge request approval into the new setup. PR #456</li> </ul> <p>Thanks to Rafael Zanella for his contribution!</p>"},{"location":"changelog/#332","title":"3.3.2","text":"<ul> <li>Don't strip trailing new lines from files. Fixes #451, PR #452.</li> </ul>"},{"location":"changelog/#331","title":"3.3.1","text":"<ul> <li>Fix for setting deploy key in some cases fail with HTTP 400: <code>{\"fingerprint\":[\"has already been taken\"]}</code>. Fixes #19, PR #441.</li> </ul>"},{"location":"changelog/#340rc1","title":"3.4.0rc1","text":"<ul> <li>Add support for multiple merge request approval rules and for changing the name of the currently managed single approval rule. Implements #388 and #95, PR #435. The syntax for this feature is shown here for now - it will be moved to the GitHub Pages docs before the final release of v3.4.0.</li> <li>(For contributors) Big refactoring to make the code more logically groupped and contribution documentation updates for easier contributions. Please see the commit messages in the PR #431 for more information.</li> </ul>"},{"location":"changelog/#330","title":"3.3.0","text":"<ul> <li>Add support for managing project Protected environments. PR #423 &amp; PR #430</li> <li>Add support for Python 3.11 and switch to this version in the Docker image.</li> <li>(For contributors) Move all the GitLabForm tests that require GitLab Premium license into a separate module and introduce a new GitHub Actions flow to enable running them for PRs after the maintainer's approval.</li> </ul> <p>Thanks to Rafael Zanella for his contributions!</p>"},{"location":"changelog/#320","title":"3.2.0","text":"<ul> <li>Add authoritative mode (<code>enforce: true</code>) support to group badges, group LDAP links, group variables, badges, deploy keys, variables. Implements #403, PR #419.</li> </ul>"},{"location":"changelog/#312","title":"3.1.2","text":"<ul> <li>Make setting project-level CI/CI variables with a non-default different <code>environment_scope</code> work again. Fixes #411, PR #414.</li> </ul>"},{"location":"changelog/#311","title":"3.1.1","text":"<ul> <li>Fixed error when passing the GitLab token in the config file with single or double quotes. Fixes #401, PR #412.</li> </ul>"},{"location":"changelog/#310","title":"3.1.0","text":"<ul> <li>Add support for Resource groups. Implements #341. PR #369.</li> <li>Fix Integrations documentation. PR #402.  </li> </ul> <p>Thanks to @ep-linden from Elastic Path and to @L154x for their contribution!</p>"},{"location":"changelog/#300","title":"3.0.0","text":"<p>This is a major new version with some backward incompatibility. Please follow the upgrade guide for a fast and safe upgrade.</p> <p>New features/bugfixes:</p> <ul> <li>Subgroups now do inherit the settings from their groups. It should have worked like this already, but it did not because of a bug #372 fixed in PR #385. (Please use <code>inherit: false</code> to keep the old behavior. See the upgrade guide for more info.),</li> <li>Shorter and easier to read errors (full stacktrace shown only when <code>--debug</code> is enabled),</li> </ul> <p>Backward-incompatible maintenance changes:</p> <ul> <li>Require GitLab version &gt;= 14.4 (released in Oct 2021) as it contains the required API rename,</li> <li>Require Python version &gt;= 3.7 (as 3.6 is EOL since Dec 2021) and update many dependencies that have required it,</li> <li>Drop support for a lot of deprecated configuration syntax that the app has warned about: <ul> <li>branch protection - no more <code>developers_can_push</code>, <code>developers_can_merge</code>, use <code>push_access_level</code>, <code>merge_access_level</code> etc. instead,</li> <li>group members - no more <code>group_shared_with</code>, <code>enforce_group_members</code>, <code>group_access_level</code>, use <code>group_members</code>, <code>group_members.enforce</code>, <code>group_access</code> instead,</li> <li>services/integrations - no more <code>recreate</code>,</li> </ul> </li> <li>Rename some configuration sections following the renames made in GitLab:<ul> <li><code>services</code> -&gt; <code>integrations</code>,</li> <li><code>secret_variables</code> -&gt; <code>variables</code>,</li> <li><code>group_secret_variables</code> -&gt; <code>group_variables</code>,</li> </ul> </li> <li>Drop the Debian-based Docker image (it's practically unused - you can maintain your own, if you needed it),</li> <li>(For users of this app as a library) Rename some API methods, remove deprecated ones:<ul> <li><code>protect_branch()</code> is now the method using the new API, the method using the old one has been removed,</li> <li><code>branch_code_owner_approval_required()</code> -&gt; <code>set_branch_code_owner_approval_required()</code>.</li> <li><code>delete_legacy_approvers()</code> has been removed,</li> <li>all the methods with <code>service(s)</code>/<code>secret_variable(s)</code>/<code>group_secret_variable(s)</code> in their names have been renamed to contain <code>integration(s)</code>/<code>variable(s)</code>/<code>group_variables(s)</code>.</li> </ul> </li> </ul> <p>Thanks to the contributors of this release: @ep-linden from Elastic Path.</p>"},{"location":"changelog/#2120","title":"2.12.0","text":"<ul> <li>Update base Docker images:<ul> <li>from Python 3.9 and Alpine 3.14 to Python 3.10 and Alpine 3.16,</li> <li>from Python 3.9 and Debian 10 (Buster) to Python 3.10 and Debian 11 (Bullseye).</li> </ul> </li> <li>Fix Group CI/CD Variables not honoring <code>protected</code> and <code>masked</code> values set to <code>false</code>. Fixes #384.</li> </ul>"},{"location":"changelog/#2111post3","title":"2.11.1post3","text":"<ul> <li>Moved the project from <code>gitlabform/gitlabform</code> to <code>gitlabform/gitlabform</code>. Stopped publishing new images to the old <code>egnyte/gitlabform</code> Docker registry.</li> </ul>"},{"location":"changelog/#2111","title":"2.11.1","text":"<ul> <li>Fix another case of GitLab's Schedules API change/bug. Fixes #364.</li> </ul>"},{"location":"changelog/#2110","title":"2.11.0","text":"<ul> <li>Allow breaking configuration inheritance. Implements #326. PR #339.</li> </ul> <p>Imagine you have a configuration like this: <pre><code>projects_and_groups:\n  my-group/*:\n    members:\n      enforce: true\n      groups:\n        regular-developers:\n          group_access: developer\n\n  my-group/special-private-project:\n    members:\n      inherit: false # &lt;--- the new keyword\n      enforce: true\n      groups:\n        special-developers:\n          group_access: developer\n      users:\n        john:\n          access_level: maintainer\n</code></pre> With the new <code>inherit: false</code> entry used here, the effective members for <code>my-group/special-private-project</code> project are ONLY the <code>special-developers</code> grup and <code>john</code> user.</p> <ul> <li>Always expect pagination for GETs. Fixes #354. PR #358.</li> <li>Workaround for the GitLab's Schedules API change/bug. Fixes #361.</li> </ul> <p></p> <p>Big thanks to the Elastic Path team for their contribution of the above feature, especially @ep-linden for the whole implementation and @amimas for the initial proposal and cooperation on design!</p> <p></p> <p>(There were 4 pre-releases of this version, 2.11.0b1-b4. b1 contained \"Allow breaking configuration inheritance\", b2 also #358, b3 also a fix of a bug that caused breaking config inheritance to not work in some cases, b4 - #361).</p>"},{"location":"changelog/#2101","title":"2.10.1","text":"<ul> <li>Fix a problem causing some changes to not be applied. Fixes #334. PR #350.</li> </ul>"},{"location":"changelog/#2100","title":"2.10.0","text":"<ul> <li>Deleting deploy keys is now possible. This partially implements #193. Also completely replace the implementation of deploy keys, secret variables and group secret variables with a new universal one. This possibly fixes #19.</li> <li>Up to 40% faster thanks to making less requests to GitLab. (For almost 1000 repositories the apply time has dropped from ~18 minutes to ~11 minutes.)</li> <li>With debug enabled a lot less duplication and a more readable output of dicts (shown as JSONs).</li> <li>For Contributors Introduce <code>SingleEntityProcessor</code> that generalizes editing things that are single per project, f.e. settings or push rules set. It does not edit entities if there are not changes to be applied. Using it implementing new features can be superfast! (See also <code>MultipleEntitiesProcessor</code> added in v2.2.0).</li> <li>For Contributors Faster tests and improved usage of fixtures.</li> </ul> <p>(A pre-release of 2.9.2 RC1 contained some of the above changes. 2.10.0rc1 pre-release was the same as 2.10.0 final but with a slightly different changelog - the speed gains turned out to be higher than expected.)</p>"},{"location":"changelog/#291","title":"2.9.1","text":"<ul> <li>Fix version 2.9.0 not even starting. \ud83e\udd26\u200d\u2642\ufe0f Add test to prevent this from happening again.</li> </ul>"},{"location":"changelog/#290","title":"2.9.0","text":"<ul> <li>Access level names (not only their numbers) are now accepted in the configuration.</li> <li>More strictness in parsing configuration YAML and better error messages thanks to a switch to different libraries. F.e. hash keys overwriting is not accepted anymore.</li> <li>Moved the project from <code>egnyte/gitlabform</code> to <code>gitlabform/gitlabform</code> and switch to GitHub Registry as the new main Docker registry.</li> </ul>"},{"location":"changelog/#281","title":"2.8.1","text":"<ul> <li>Don't show \"Warning: Using group_shared_with: is deprecated\" although the user is not really using this config syntax.</li> </ul>"},{"location":"changelog/#280","title":"2.8.0","text":"<ul> <li>Complete support for managing groups and projects members:<ul> <li>Add enforcing (direct) project members - groups and users, including being able to remove all direct members and keep only the members inherited from the group. Implements #100.</li> <li>Unify the configuration syntax for group and project level membership.</li> </ul> </li> </ul> <p>\u2728 New \u2728 config syntax example: <pre><code>projects_and_groups:\n  foo/*:\n    # below key now includes what used to be under \n    # `group_shared_with` and `enforce_group_members` keys\n    group_members:\n      # there are only up to 3 direct keys below\n      groups:\n        another-group:\n          # below key's name been changed to the name used in projects `members`\n          # for groups (and the same as in the API to share group with group)\n          group_access: 30\n      users:\n        my-user:\n          access_level: 50 # owner\n      # this will enforce group-level users to be ONLY as defined above\n      enforce: true\n\n    # this will make the projects in `foo` group not contain any **direct** users or groups other\n    # (so it will make it contain only the ones inherited from the group `foo`)\n    members:\n      enforce: true\n</code></pre> The \ud83c\udfda old and deprecated \ud83c\udfda syntax for a similar* config would be: <pre><code>projects_and_groups:\n  foo/*:\n    group_shared_with:\n      groups:\n        another-group:\n          group_access_level: 30\n    group_members:\n      my-user:\n        access_level: 50 # owner\n    enforce_group_members: true\n\n    # !!! * - there was no enforce project members support before v2.8.0 !!!\n</code></pre> The old syntax works but will generate warnings. Support for it will be removed in one the future major GitLabForm versions.</p>"},{"location":"changelog/#271","title":"2.7.1","text":"<ul> <li>Speed up running for <code>ALL_DEFINED</code>, when the defined groups and projects for just a small part of all the GitLab instance's groups and projects. Additionally always show the number of omitted groups and projects for any reasons (no config, archived, skipped). Fixes #285.</li> </ul>"},{"location":"changelog/#270","title":"2.7.0","text":"<ul> <li>Allow processing only requested configuration sections using a new cli argument <code>-os / --only-sections</code>.</li> <li>Minimize the number of unnecessary audit branch unprotect/protect events. Up to now every apply of the <code>files</code> section for protected branch resulted in unprotect and then (re)protect event for each protected branches and each file. Now this will only happen when the user running GitLabForm actually needs to do that, which should not happen often if you are using an admin account. Completely fixes #178.</li> </ul>"},{"location":"changelog/#260","title":"2.6.0","text":"<ul> <li>Complete support for Protected branches - access levels / users / groups allowed to push/merge/unprotect (GitLab Premium (paid) only). PR #289.</li> <li>Add option to allow push force in protected branches. Implements #227.</li> <li>Fix a bug causing the app to get HTTP 502 from GitLab when protecting branches in some cases.</li> <li>Fix getting members list to include usernames of all direct members not just the first page. PR #284.</li> </ul> <p>Big thanks to the contributors of this release: @trissanen</p>"},{"location":"changelog/#250","title":"2.5.0","text":"<ul> <li>Make commit messages for file operations configurable. Implements #278.</li> </ul> <p>Thanks to @aleung for his contribution!</p>"},{"location":"changelog/#240","title":"2.4.0","text":"<ul> <li>Add wildcard support for <code>skip_groups</code> and <code>skip_projects</code>. Implements #275 and #276.</li> </ul> <p>Thanks to @chris-workingmouse for his contribution!</p>"},{"location":"changelog/#230","title":"2.3.0","text":"<ul> <li>Add Protected branches - users allowed to push/merge (GitLab Premium (paid) only), PR #273.</li> <li>For <code>ALL_DEFINED</code> also skip archived projects even if they are explicitly defined in the config, unless -a flag is added - for consistency.</li> <li>For Contributors Add docs for running the test themselves in a Docker container and for running GitLab in Docker using a license file, for testing paid-only features.</li> </ul> <p>Thanks to @florentio, @barryib and @Pigueiras for their contribution!</p>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li> <p>Add LDAP Group Links support (GitLab Premium (paid) only). Implements #140.</p> </li> <li> <p>Add project and group badges support. Implements #59.</p> </li> <li> <p>Allow 0 (no access) in Protected Tags. Fixes #172.</p> </li> <li> <p>Exit on configuration missing <code>projects_and_groups</code> key. This will provide a helpful error message for typos made in this key. Fixes #242.</p> </li> <li>Make error messages more friendly when there is no network connection or when configuration is invalid (f.e. YAML parsing errors).</li> <li> <p>Make the output of some processors a bit more consistent.</p> </li> <li> <p>Fix detecting an \"empty effective config\" and improve the UI related to processing groups and projects with such. Fixes #251.</p> </li> <li> <p>Big refactoring that should make adding new features easier and faster. The main change is introducing a new way to implement \"processors\" - thanks to a generalized <code>MultipleEntitiesProcessor</code> class adding a new feature like Project Badges should is now as easy as implementing a class like <code>BadgesProcessor</code> and writing an acceptance test like <code>TestBadges</code>. Note that this new design may change in the near future and we are open to discussions and PRs to make it even better! We also plan to create a similar generalized <code>SingleEntityProcessor</code> class soon.</p> </li> <li> <p>Change the User Agent that the app uses when making requests to GitLab to a custom <code>GitLabForm/&lt;gitlabform_version&gt; (python-requests/&lt;requests_version&gt;)</code>.</p> </li> </ul>"},{"location":"changelog/#212","title":"2.1.2","text":"<ul> <li>Managing project members is not incredibly slow anymore. Fixes #240</li> </ul> <p>Thanks to @andrewjw (Ocado Technology) for his contribution!</p>"},{"location":"changelog/#211","title":"2.1.1","text":"<ul> <li>Fixed sharing group with a subgroup. Fixes #236</li> <li>Improved re-protecting branches after updating files in them. Fail fast if the config is invalid.</li> <li>Better Docker images:<ul> <li>Updated Alpine from 3.12 to 3.14,</li> <li>Started to build images in ARM64 architecture (apart from x86-64),</li> <li>Started to add tags , .. Note that Alpine-based image is the main one which gets these tags. For Debian-based images add \"-buster\" suffix. Implements #173 <p>Thanks to @andrewjw (Ocado Technology) for his contribution!</p>"},{"location":"changelog/#210","title":"2.1.0","text":"<ul> <li>Added a feature to share groups with other groups, with optional enforcing. Implements #150</li> </ul> <p>Thanks to @andrewjw (Ocado Technology) for this contribution!</p>"},{"location":"changelog/#206","title":"2.0.6","text":"<ul> <li>Fixed incorrect subgroups list when requesting to process ALL_DEFINED. Completes the fix for #221</li> </ul>"},{"location":"changelog/#205","title":"2.0.5","text":"<ul> <li>Really fixed issue with <code>unprotect_branch_new_api</code>. Fixes #219</li> <li>Fixed call to a Merge Requests Approvers API endpoint removed in GitLab 13.11.0. Fixes #220</li> <li>Fixed potential security issue by enabling autoescaping when loading Jinja templates. (Bandit security tool issue B701)</li> </ul> <p>Thanks to @Pigueiras for his contribution!</p>"},{"location":"changelog/#204","title":"2.0.4","text":"<ul> <li>Fixed issue with Push Rules when the project name contains a dot. Fixes #224</li> <li>Fixed calling to process a single subgroup (like: <code>gitlabform 'group/subgroup'</code>). Fixes #221</li> </ul>"},{"location":"changelog/#203","title":"2.0.3","text":"<ul> <li>Fixed issue with dry-run for Project Push Rules when the current config is empty (<code>None</code>). Fixes #223</li> </ul>"},{"location":"changelog/#202","title":"2.0.2","text":"<ul> <li>Fixed issue with <code>unprotect_branch_new_api</code>. Fixes #219     (update: later it turned out that it was not really fixed in 2.0.2 but in 2.0.5 instead)</li> </ul>"},{"location":"changelog/#201","title":"2.0.1","text":"<ul> <li>Fixed issues with Jinja loader.</li> <li>Fixed calls to GitLab API that do not contain 'x-total-pages' header (gradually rolled out since GitLab MR #23931).</li> <li>Start showing deprecation warning when using the old branch protection API config syntax.</li> </ul> <p>Thanks to @mkjmdski for his contribution!</p> <p>(2.0.0post1-3 release is technically the same as 2.0.1 but was incorrectly versioned.)</p>"},{"location":"changelog/#200","title":"2.0.0","text":"<p>(For a detailed info about changes in each RC of v2 please see the previous version of this changelog.)</p> <ul> <li> <p>Make deep merging of configuration actually work (breaking change). Fixes #197 (RC5)</p> </li> <li> <p>Introduce config versioning (breaking change). ...or rather a change to avoid breakage. New major releases of GitLabForm starting with v2 will look for <code>config_version</code> key in the config file. If it doesn't exist, or the version does not match expected then the app will exit to avoid applying unexpected configuration and allowing the user to update the configuration. (RC1)</p> </li> <li> <p>New config syntax (breaking change). All 3 levels under a common key <code>projects_and_groups</code>. It should contain a dict, where common config is under a special <code>\"*\"</code> key, group configs under keys like <code>group/*</code> and project configs under keys like <code>group/project</code>. This will allow introducing pattern matching in these keys and introducing support for multiple config files in the future releases. Partially implements #138. (RC1)</p> </li> <li> <p>Exit with code != 0 when any group/project processing was failed (breaking change). This will allow you to notice problems when running the app from CI. Note that you can restore the old behaviour by running the app with <code>(...) || true</code>. Also standardized exit codes. Exit with 1 in case of input error (f.e. config file does not exist), with 2 in case of processing error (f.e. GitLab returns HTTP 500).Fixes #153. (RC1)</p> </li> <li> <p>Allow any case in groups and projects names (breaking change). GitLab groups and projects names are case sensitive but you cannot create such entities that differ only in the case. There is also a distinction between a \"name\" and a \"path\" and they may differ in case... To make work with this easier GitLabForm now accepts any case for them in both config files as well as when provided as command line arguments. We also disallow such entities that differ only in case (f.e. <code>group/*</code> and <code>GROUP/*</code>) to avoid ambiguity. Fixes #160. (RC2)</p> </li> <li> <p>Ignore archived projects by default (breaking change). This makes processing faster and output shorter. You can restore the previous behavior by adding <code>--include-archived-projects</code>/<code>-a</code> command line switch. Note that you have to do it if you want to unarchive archived projects! Fixes #157 in (arguably) a more convenient way. (RC2)</p> </li> <li> <p>Color output! Implements #141. (RC1)</p> </li> <li> <p>Add diffing feature for secret variables. (with values shown as hashes to protect the secrets from leaking). (RC6)</p> </li> <li> <p>Added checking for invalid syntax in \"members\" section. Defining groups or users directly under this key instead of under sub-keys \"users\" and \"groups\" will now trigger an immediate error. (RC5)</p> </li> <li> <p>Add support for Python 3.9 (RC8)</p> </li> <li> <p>Added Windows support. Fixes #206 (RC5)</p> </li> <li> <p>Start processing at any group using the new command line switch - <code>--start-from-group</code>/<code>-sfg</code>. Similar to <code>--start-from</code>/<code>-sf</code> switch that can be used for projects. (RC1)</p> </li> <li> <p>Start releasing pre-releases as Docker images. They have tags with specific versions, but not \"latest\" tag as it is reserved for new final releases. Implements #201 (RC5)</p> </li> <li> <p>Prevent multiple email notifications from being sent when adding members to project. Fixes #101 (RC6)</p> </li> <li> <p>Prevent project's Audit Events being filled in with \"Added protected branch\". Fixes #178 (RC6)</p> </li> <li> <p>Fixed using \"expires_at\" for users. Fixes #207 (RC6)</p> </li> <li> <p>Remove the need to add the <code>gitlab.api_version</code> configuration key. (RC1)</p> </li> <li> <p>For Contributors Make writing tests easier and the tests more robust. Deduplicate a lot of the boilerplate code, allow putting configs into the test methods and use pytest fixtures for easier setup and cleanup. This should fix issues with tests reported in #190. Also stop storing any dockerized GitLab data permanently to avoid problems like #196 and probably other related to failed dockerized GitLab upgrades. (RC3)</p> </li> <li> <p>For Contributors Rename \"integration tests\" to \"acceptance tests\". Because they ARE in fact acceptance tests. (RC3)</p> </li> </ul> <p>Thanks to @amimas, @weakcamel, @kowpatryk, @ss7548, @houres, @Pigueiras and @YuraBeznos for their contributions!</p>"},{"location":"changelog/#before-200","title":"before 2.0.0","text":"<p>Please see GitHub pre-2.0 releases' descriptions.</p>"},{"location":"features/","title":"Features","text":"<p>GitLabForm enables you to manage the (GitLab's) Application Settings and:</p> <ul> <li> <p>Group:</p> <ul> <li>Badges</li> <li>CI/CD variables</li> <li>Members (groups) {share/unshare with group, change access level, optional enforce}</li> <li>Members (users) {add/remove user, change access level, optional enforce}</li> <li>Members using LDAP Group Links (GitLab Premium (paid) only)</li> <li>Members using SAML Group Links (GitLab Premium (paid) only)</li> <li>Settings</li> </ul> </li> <li> <p>Project:</p> <ul> <li>Archive/unarchive</li> <li>Badges</li> <li>CI/CD Job Token Scope</li> <li>CI/CD Job Token Scope</li> <li>CI/CD variables</li> <li>Deploy keys</li> <li>Files {add, edit or delete}, with templating based on Jinja2 (now supports custom variables!)</li> <li>Integrations</li> <li>Members (groups) {share/unshare with group, change access level, optional enforce}</li> <li>Members (users) {add/remove user, change access level, optional enforce}</li> <li>Merge Requests project-level configuration and approval rules (GitLab Premium (paid) only)</li> <li>Pipeline schedules</li> <li>Project security settings</li> <li>Protected branches:</li> <li>access levels (roles) allowed to push/merge/unprotect, allow force push flag,</li> <li>users/groups allowed to push/merge/unprotect, code owner approval required flag (GitLab Premium (paid) only),</li> <li>Protected environments</li> <li>Push Rules (GitLab Premium (paid) only)</li> <li>Resource groups</li> <li>Settings</li> <li>Tags protect/unprotect</li> <li>Webhooks</li> </ul> </li> </ul> <p>...for:</p> <ul> <li>all projects in your GitLab instance/that you have access to</li> <li>a group/subgroup of projects</li> <li>a single project</li> </ul> <p>...and a combination of them.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#run-without-installing","title":"Run without installing","text":"<p>Note: you don't have to install the app to use it.</p> <p>You can just run the latest stable version with:</p> <ul> <li>Docker: <pre><code>docker run -it -v $(pwd):/config ghcr.io/gitlabform/gitlabform:latest gitlabform\n</code></pre></li> <li>pipx: <pre><code>pipx run gitlabform\n</code></pre></li> </ul> <p>Similarly, you can run the latest 3.* version with:</p> <ul> <li>Docker: <pre><code>docker run -it -v $(pwd):/config ghcr.io/gitlabform/gitlabform:3 gitlabform\n</code></pre></li> <li>pipx: <pre><code>pipx run --spec 'gitlabform&gt;=3,&lt;4' gitlabform\n</code></pre></li> </ul> <p>See this for all the available Docker tags.</p>"},{"location":"installation/#really-install","title":"Really install","text":"<p>If you do want to install the app you can do it with:</p> <ul> <li>pipx (recommended): <pre><code>pipx install gitlabform\n</code></pre></li> <li>plain <code>pip</code>: <pre><code>pip3 install gitlabform\n</code></pre></li> </ul>"},{"location":"requirements/","title":"Requirements","text":"<ul> <li>Python 3.12<ul> <li>you can use Docker image or pyenv if your OS does not have a required Python version</li> </ul> </li> <li>Self-Hosted GitLab 14.4+ or SaaS GitLab @ gitlab.com<ul> <li>Premium (paid) license for some features</li> </ul> </li> </ul> <p>Note 1: GitLabForm is built and tested against <code>gitlab-ee/latest</code>, so some features may require a newer version.</p> <p>Note 2: Some features may not be available in SaaS GitLab @ gitlab.com because of gitlab.com's limitations.</p>"},{"location":"running/","title":"Running","text":"<p>To apply settings for a single project, run the app with the path to the project, f.e.:</p> <pre><code>gitlabform my-group/my-project1\n</code></pre> <p>To apply settings for a group of projects, run:</p> <pre><code>gitlabform my-group\n</code></pre> <p>To apply settings for all groups of projects and projects explicitly defined in the config, run:</p> <pre><code>gitlabform ALL_DEFINED\n</code></pre> <p>To apply settings for all groups and projects that you can modify, run:</p> <pre><code>gitlabform ALL\n</code></pre> <p>To see what changes are being made, run:</p> <pre><code>gitlabform ALL_DEFINED --verbose\n</code></pre> <p>To see what changes are being made but limit the output to only those settings that are changing, run:</p> <pre><code>gitlabform -c config.yml ALL_DEFINED --verbose --diff-only-changed\n</code></pre> <p>Run:</p> <pre><code>gitlabform -h\n</code></pre> <p>...to see the current set of supported command line parameters.</p>"},{"location":"similar_apps/","title":"Similar apps","text":""},{"location":"similar_apps/#gitlab-provider-for-terraform","title":"GitLab provider for Terraform","text":"<p>Terraform, the almost universal \"* as a code\" tool from Hashicorp, which inspired this app (hence the name!), has a provider for configuring GitLab using the Hashicorp Configuration Language (HCL).</p> <p>It is an older and more mature solution than GitLabForm, using a de-facto standard configuration language, but it's also more generic.</p> <p>GitLabForm has been built specifically for managing GitLab and has been designed around different concepts that provide a different set of features, arguably a more powerful one.</p>"},{"location":"similar_apps/#key-differences","title":"Key differences","text":"<p>...between GitLab provider for Terraform (\"GT\") and GitLabForm (\"GLF\"):</p> <ul> <li> <p>GT allows creating resources such as users, groups and projects while GLF (as of now) allows only configuring existing   entities (with an exception for management of files in the repo, which is a unique GLF feature),</p> </li> <li> <p>GT can only manage specific groups and projects. GLF allows configuring everything it supports for ALL of your projects   in your GitLab instance (with the possibility to provide more specialized configuration for some of the groups and projects).</p> </li> <li> <p>GT is using a structured language which describes each managed resource explicitly (with iterators, of course) while   GLF is based on YAML and a concept of hierarchical, inheritable configuration with merging/overwriting and addivity.   Therefore only with GLF you can write configs like \"For all projects in group X do this, but for specific projects X/A   and X/B in it also do this and for X/C do something a bit different\".</p> </li> <li> <p>GT wraps the GitLab API into abstractions while GLF in many cases (explained in the docs) makes PUT/POST requests of the dicts found   in the config as-is to the GitLab API. GT approach is more convenient and less \"raw\" (you read GT docs when using it, while   for GLF you also have to read GitLab API docs) but GLF allows you to use all of the GitLab API features - GT supports only   a fraction of GitLab's API parameters for editing group and project while GLF by design allows you to use all of them.   Also when you update your GitLab instance you can start using new API features immediately with GLF while with GT you   have to wait until its new version supporting those features is released.</p> </li> </ul>"},{"location":"similar_apps/#feature-matrixcomparison-sheet","title":"Feature matrix/comparison sheet","text":"<p>For your convenience we have prepared GitLab provider for Terraform vs GitLabForm feature matrix / comparion sheet. Note: this sheet MAY contain errors and WILL get outdated. Please report these issues in it using comments. Thank you!</p>"},{"location":"similar_apps/#gitlab-configuration-as-code-gcasc","title":"GitLab Configuration as Code (GCasC)","text":"<p>Since v3.10.0 you can configure the GitLab's application settings too with GitLabForm.</p> <p>For possibly more instance-wide settings of GitLab (like appearance, features, license, etc.) you can also check out the GitLab Configuration as Code (GCasC) project.</p> <p>(Although as of May 2024 it looks a bit stale.)</p>"},{"location":"upgrade/","title":"Upgrading to new major versions","text":"<p>Some of these changes between major application versions may affect the effective configuration that would be applied if you run the application. Therefore to do the upgrade safely please follow this procedure.</p>"},{"location":"upgrade/#from-2-to-3","title":"From 2.* to 3.*","text":"<p>Steps outline:</p> <ol> <li>Update to the latest v2.x.x and fix all the deprecation warnings the application prints out during run. The syntax deprecated in v2 has been removed in v3.</li> <li>Stop v2 from running automatically (if you have such automation).</li> <li> <p>In your config:</p> <ul> <li>In v3 a bug that caused subgroup config to not inherit its group config has been fixed. If you do have configs for some groups and a config for their subgroups, then your effective configuration may change after the upgrade to v3. If you do not want that, or you are not sure, then please do the following to keep the old behavior: add <code>inherit: false</code> entries to all of such subgroups config, under each configuration section: Example: <pre><code>projects_and_groups:\n  some_group/*:\n    group_settings:\n      project_creation_level: maintainer\n      subgroup_creation_level: owner\n      visibility: internal\n\n  some_group/subgroup/*:\n    group_settings:\n      # add the line below to keep the old behavior\n      inherit: false\n      project_creation_level: developer\n\n  some_group/subgroup/subsubgroup/*:\n    group_settings:\n      # add the line below to keep the old behavior\n      inherit: false\n      visibility: private\n</code></pre></li> <li>Replace <code>services:</code> with <code>integrations:</code>,</li> <li>Replace <code>secret_variables:</code> with <code>variables:</code>,</li> <li>Replace <code>group_secret_variables:</code> with <code>group_variables:</code>,</li> <li>Replace <code>config_version: 2</code> with <code>config_version: 3</code></li> <li>Update <code>merge_requests:</code>; <code>approvals_before_merge:</code> needs to be defined   in specific approval rule</li> </ul> </li> <li> <p>Upgrade the app from v2 to v3.</p> </li> <li>Re-enable v3 to run automatically (if you have such automation).</li> </ol>"},{"location":"upgrade/#from-1-to-2","title":"From 1.* to 2.*","text":"<p>Steps outline:</p> <ol> <li>Generate effective configuration that is applied when you run v1 and keep it. Update to &gt;= v1.23.0 first, as we added the feature to output the effective config to file to that version. Add these parameters to your regular ones: <code>--output-file v1_configuration.yaml</code>. You may also add <code>-n</code> to run it in a noop mode. Save the generated YAML.</li> <li>Stop v1 from running automatically (if you have such automation).</li> <li> <p>Upgrade to v2 and update the configuration syntax. The major syntax changes are:</p> <ul> <li>add <code>config_version: 2</code>,</li> <li>remove <code>api_version: 4</code>,</li> <li>common, group and project configs are now all under a single <code>projects_and_groups</code> key,</li> <li>if you have <code>common_settings</code> section then move it under a new key <code>\"*\"</code> under <code>projects_and_groups</code>,</li> <li>if you have <code>groups_settings</code> or <code>projects_settings</code> then move their contents to be under all under <code>projects_and_groups</code>,</li> <li>for each group config replace <code>&lt;group name&gt;:</code> with <code>&lt;group name&gt;/*:</code>.</li> <li>leave project configs unchanged.</li> </ul> </li> <li> <p>Generate effective configuration that is applied when you run v2 using \"noop\" mode. Add these parameters to your regular ones: <code>--output-file v2_configuration.yaml --noop --include-archived-projects</code>. (The last one is needed to have the projects list to process the same as for v1, as v2 by default skips the archived projects.) Save the generated YAML file.</p> </li> <li>Compare the YAML files with effective configuration from v1 to v2 and correct the configuration to get either exactly the same result or acceptable differences.</li> <li>Run v2 without the \"noop\" mode and review the results. Look for failures and exit code different from 0. Fix found issues.</li> <li>Re-enable v2 to run automatically (if you have such automation).</li> </ol>"},{"location":"contrib/","title":"Contributing","text":"<p>All contributions are welcome!</p> <ul> <li>ask questions, report issues, ask for features or write anything message to the app authors - use Issues for all of these,</li> <li>contribute to the documentation and example configuration - with Pull Requests, </li> <li>contribute your bug fixes, new features, refactoring and other code improvements - with Pull Requests,</li> </ul> <p>...and probably more! If you want to help in any way but don't know how - create an Issue.</p>"},{"location":"contrib/#issues","title":"Issues","text":"<p>As the project is not (yet ;) flooded with issues the guidelines for creating them are not very strict and should be very common sense ones.</p>"},{"location":"contrib/#questions","title":"Questions","text":"<p>Before asking a question please make sure that you have read these docs.</p>"},{"location":"contrib/#problems","title":"Problems","text":"<p>Before reporting a problem please update GitLabForm to the latest version and check if the issue persists.</p> <p>If it does then please try to report what environment you have, what you try to do, what you expect to happen and what does in fact happen.</p> <p>To be more specific please remember to:</p> <ul> <li>provide GitLab version,</li> <li>provide GitLabForm version,</li> <li>provide your Python version and Operating System,</li> <li>provide config in whole, or a relevant fragment (of course you can and should redact any values you need to redact for privacy and security reasons),</li> </ul>"},{"location":"contrib/#feature-requests","title":"Feature requests","text":"<p>Please note that although we do accept feature requests we do not promise to fulfill them.</p> <p>However, it's still worth creating an issue for this as it shows interest in given feature and that may be taken into account by both existing app authors and new contributors when planning to implement something new.</p>"},{"location":"contrib/#pull-requests","title":"Pull Requests","text":"<p>Please read the other articles about contributing for more info about this.</p>"},{"location":"contrib/coding_guidelines/","title":"Coding guidelines","text":"<p>Please do:</p> <ul> <li>use the common sense,</li> <li>add tests along with the new code that prove that it works:<ul> <li>when adding/changing non-trivial logic please add unit tests,</li> <li>for all bug fixes and new features using GitLab API please add acceptance tests</li> </ul> </li> <li>add or update the docs for new features,</li> <li>use pre-commit to automatically reformat your code and run linters before committing,</li> <li>squash your commits (unless there is a reason not to),</li> <li>follow conventional-commit format in order to produce consistent human and machine-readable commit messages, making it easier for maintainers to produce the CHANGELOG.</li> </ul> <p>We are very open to refactoring but in case of bigger efforts we suggest creating an issue first and discussing what you propose to do before doing it.</p>"},{"location":"contrib/implementation_design/","title":"Implementation design","text":"<p>If you haven't done this before, please read the configuration introduction article first.</p> <p>It explains the \"why\"s of the two key design concepts of this app:</p> <ul> <li>hierarchical configuration with inheritance, merging/overwriting and additivity,</li> <li>raw parameters passing</li> </ul> <p>Please also read the general coding guidelines for the basics of how to create PRs, the expected style of your code etc. - the \"general how\"s.</p> <p>This article purpose is to explain \"specific how\"s - explain what is where in the code and how to add features by example.</p>"},{"location":"contrib/implementation_design/#calling-gitlab-rest-apis","title":"Calling GitLab REST APIs","text":"<p>We prefer to call GitLab's REST APIs using <code>python-gitlab</code> rather than creating our own REST implementations.</p> <p>A python_gitlab instance <code>./gitlabform/gitlab/python_gitlab.py</code> is provided on <code>AbstractProcessor</code>, extending the base functionality to add convenience methods and caching to common GET requests. It will not always be appropriate to call a <code>_cached</code> method, as you will require the updated instance of a given Object after performing CRUD operations upon it. </p>"},{"location":"contrib/implementation_design/#project-structure","title":"Project Structure","text":""},{"location":"contrib/implementation_design/#packages-overview","title":"Packages overview","text":"<ul> <li> <p><code>gitlabform.*</code>, <code>gitlabform.lists.*</code> and <code>gitlabform.processors.*</code> - these contain the main app logic.   They provide the CLI, parsing of the parameters (<code>gitlabform.*</code>), getting the input lists of groups and projects   to process and omitting unneeded ones to get the effective lists (<code>gitlabform.lists.*</code>) and finally processors   are used to apply the groups and projects configurations in GitLab,</p> </li> <li> <p><code>gitlabform.gitlab.*</code> - contains the GitLab API client code, grouped mostly by the GitLab API    as documented at docs.gitlab.com.</p> </li> <li> <p><code>gitlabform.configuration.*</code> - contains the logic for reading the config from YAML file or a string   (the latter is only for testing) and getting an effective config per GitLab project by merging   the config on these levels: common, group and project settings.</p> </li> </ul> <p>Please see the below doc sections for more info about these packages.</p>"},{"location":"contrib/implementation_design/#common-pattern-multiple-inheritance","title":"Common pattern - multiple inheritance","text":"<p>In many of the above packages we are using multiple inheritance.</p> <p>The basic features are often implemented in the \"core\" class defined in <code>core.py</code>. Extensions to it are defined in all other files as \"feature\" classes that inherit the \"core\". Finally, there is an \"everything\" class that groups them all - it is defined in the <code>__init__.py</code> file.</p>"},{"location":"contrib/implementation_design/#gitlabform-gitlabformlists-and-gitlabformprocessors","title":"gitlabform., gitlabform.lists. and gitlabform.processors.*","text":"<p>The entry point for running the app is in <code>run.py</code> and the main logic is in the <code>GitLabForm</code> class.</p> <p>This code boils down to the <code>run()</code> method, which for each project that according to the app parameters and config should be taken into account, applies the effective config.</p> <p>The code in <code>gitlabform.lists.*</code> is used to generate the input lists of groups and projects, omit the ones that can and should be omitted for saving the processing time (f.e. archived projects, groups and projects with empty effective config) and this way generate the effective lists of groups and projects.</p> <p>The effective config for these contain what is called the \"config sections\", which are the YAML keys that can exist under projects in the config YAML, for example: <code>deploy_keys</code>, <code>variables</code>, <code>group_variables</code> and so on.</p> <p>Those config sections are processed by the code in the classes inheriting from the <code>AbstractProcessor</code> class. This class should be reused when implementing new functionalities (such as supporting new configuration keys) as it holds the common  logic for skipping the configuration parts and running in dry-run mode. The processors have been grouped into two  packages - <code>group</code> where the processors applied to the group settings are implemented and <code>project</code> - where processors executed on the project level are located.</p> <p>Since v2.2.0 there is a new way of implementing processors - by inheriting form <code>MultipleEntitiesProcessor</code> class. It should be applied for new features which manage 0-N entities of some kind under a group or a project. See <code>BadgesProcessor</code> as an example how to use it.</p> <p>Since v2.10.0 we have a similar solution for features where you manage a single entity - <code>SingleEntityProcessor</code> class. See <code>ProjectPushRulesProcessor</code> as an example how to use it. </p>"},{"location":"contrib/implementation_design/#usage","title":"Usage","text":"<p>If you want to add/change/fix things under an existing config section then most likely you will need to update  the code in the processor classes (for example, in <code>BranchesProcessor</code>).</p> <p>If you want to add support for a new config section (= completely new feature), then you need to:</p> <ol> <li>(TODO: expand this sections) Consider writing a new processor using <code>MultipleEntitiesProcessor</code> or <code>SingleEntityProcessor</code> class as a base.</li> <li>Create a new class <code>group_&lt;new_config_section_name&gt;_processor</code> (if it applies to the group settings) or  <code>&lt;new_config_section_name&gt;_processor</code> (if it applies to project settings) and implement two methods:<ul> <li><code>_process_configuration</code> - which does the actual processing by calling the API and applying the changes in GitLab;</li> <li><code>_log_changes</code> - which is optional but recommended to implement; by calling this method the effective changes  to be applied should be logged (when running in dry-run mode). </li> </ul> </li> <li>Add the new processor to <code>GroupProcessors</code> in <code>group &gt; __init__.py</code> (if group settings processor was created) or  to <code>ProjectProcessors</code> in <code>project &gt; __init__.py</code>. </li> </ol>"},{"location":"contrib/implementation_design/#gitlabformgitlab","title":"gitlabform.gitlab.*","text":"<p>Important</p> <p>We have decided to move away from our own homegrown GitLab API client to the <code>python-gitlab</code> library. (See issue #73 for info.) Therefore, you should NOT add any more code to this package!</p> <p>With the basics for making requests to the GitLab API covered in the <code>GitLabCore</code> class in <code>core.py</code>, all other code is simple (most of the time).</p> <p>Almost all methods in other classes end up calling <code>self._make_requests_to_api</code>, which takes care of making the HTTP GitLab API requests with proper authentication, pagination, retries, timeouts and more.</p> <p>Sometimes there is some logic in these methods if:</p> <ul> <li>we only need a specific part of the response from GitLab API - see <code>GitLabProjects.get_all_projects()</code> as an example,</li> <li>some GitLab APIs need some workarounds for their bugs or documentation inconsistencies, like:<ul> <li>some APIs declare in the docs that they accept both \"group/project\" string OR a project id while in fact only the latter works - see <code>GitLabProjects.post_approvals()</code> as an example,</li> <li>some APIs return invalid HTTP error codes, like 404 instead of 400 - see <code>GitLabGroupLDAPLinks.add_ldap_group_link</code> as an example.</li> </ul> </li> </ul> <p>Note: Some of the code here is NOT used by the GitLabForm app, but utilized by internal Egnyte applications that have not (yet) switched to the more standard <code>python-gitlab</code>.</p>"},{"location":"contrib/implementation_design/#usage_1","title":"Usage","text":"<p>If you want to add/change/fix code that operates on an existing GitLab API you should look around  the \"feature\" classes in this package (for example <code>GitLabMergeRequests</code> in <code>merge_requests.py</code>).</p> <p>If you want to add code that operates on the new GitLab API you should:</p> <ol> <li>create a new <code>new_gitlab_api_name.py</code> file in <code>gitlabform.gitlab</code> and define a \"feature\" class there    that inherits <code>GitLabCore</code> (for example: <code>GitLabApiName</code>).</li> <li>add the new feature class to the list of classes inherited by the \"everything\" <code>GitLab</code> class    defined in <code>__init__.py</code>. </li> </ol>"},{"location":"contrib/implementation_design/#gitlabformconfiguration","title":"gitlabform.configuration.*","text":"<p>The core code in this package contains some share code, which apart from the rather obvious things like parsing the input YAML, getting the value from a specific subkey and merging configs, contains also:</p> <ul> <li>code for breaking configuration inheritance using <code>inherit: false</code>,</li> <li>dealing with groups and project names in GitLab being de facto case-insensitive (you can change case of such entities name, but you cannot have 2 which names differ only in case) (see \"almost duplicates\" in the code),</li> </ul> <p>The class inheritance order in this package (core -&gt; common -&gt; groups -&gt; projects) is intentional, as common config affects groups configs and this in turn affects projects configs.</p> <p>The effective configuration for a project may contain elements that are inherited from the common level and from the group level.</p> <p>A separate module in this package, <code>transform.py</code>, contains code that does YAML-level transformation form allow a more user-friendly config syntax that is later replaced with a syntax required by GitLab API. An example of this can be accepting <code>user: &lt;username&gt;</code> in the input config syntax but internally transforming it into <code>user_id: &lt;id_number&gt;</code>.</p>"},{"location":"contrib/local_development/","title":"Local Development","text":""},{"location":"contrib/local_development/#required-tools","title":"Required tools","text":"<ul> <li>Python 3 and Pip 3 for development</li> <li>Docker for running Gitlab on local machine</li> <li><code>jq</code> used in local environment setup scripts</li> <li><code>pre-commit</code> used to run linters and checks prior to commits made locally</li> </ul>"},{"location":"contrib/local_development/#environment-setup","title":"Environment setup","text":"<ol> <li> <p>Create virtualenv with Python 3, for example in <code>venv</code> dir which is in <code>.gitignore</code> and activate it: <pre><code>python3 -m venv venv\n. venv/bin/activate\n</code></pre></p> </li> <li> <p>Install GitLabForm in develop mode: <pre><code>pip install -e .\n</code></pre></p> </li> </ol> <p>Now you can run and debug the app locally.</p>"},{"location":"contrib/local_development/#running-unit-tests","title":"Running unit tests","text":"<p>GitLabForm uses <code>pytest</code> for tests. You can run unit tests directly on your machine or in a Docker container.</p>"},{"location":"contrib/local_development/#running-unit-tests-locally","title":"Running unit tests locally","text":"<p>To run unit tests locally:</p> <ol> <li> <p>Activate the virtualenv created above</p> </li> <li> <p>Install the dependencies for tests: <pre><code>pip install -e '.[test]'\n</code></pre></p> </li> <li> <p>Run <code>pytest tests/unit</code> to run all the unit tests.</p> </li> </ol>"},{"location":"contrib/local_development/#running-unit-tests-in-a-docker-container","title":"Running unit tests in a Docker container","text":"<p>If you have a problem with installing the test dependencies on your localhost, you can run the tests in Docker container too, like this:</p> <ol> <li>Build the image: <pre><code>docker build . -f ./dev/tests.Dockerfile -t gitlabform-tests:latest\n</code></pre></li> <li>Use it to run the tests: <pre><code>docker run -it -v $(pwd):/code gitlabform-tests:latest /bin/ash -c \"cd /code &amp;&amp; pytest tests/acceptance\"\n</code></pre></li> </ol>"},{"location":"contrib/local_development/#running-acceptance-tests","title":"Running acceptance tests","text":"<p>Most GitLabForm test are the ones that make real operations on a running GitLab instance. You can run them against a disposable GitLab instance running as a Docker container OR use your own GitLab instance.</p>"},{"location":"contrib/local_development/#running-acceptance-tests-using-gitlab-instance-in-docker","title":"Running acceptance tests using GitLab instance in Docker","text":"<ol> <li>Run below command to start GitLab in a docker container. Note that it may take a few minutes!</li> </ol> <pre><code>./dev/run_gitlab_in_docker.sh\n</code></pre> <ol> <li>Run <code>pytest tests/acceptance</code> to start all tests. To run only a single class with tests run, f.e.:</li> <li><code>pytest tests/acceptance -k \"TestArchiveProject\"</code>. To run a single test method run, f.e.:</li> <li><code>pytest tests/acceptance -k \"test__set_file_strongly_protected_branch\"</code>.</li> </ol>"},{"location":"contrib/local_development/#acceptance-tests-for-gitlab-paid-features","title":"Acceptance tests for GitLab paid features","text":"<p>To test features that are only available in paid version of Gitlab, you'll need a Gitlab license so that those features are available and the acceptance tests can use it. You can signup for a Gitlab Trial license. Follow the instructions in Gitlab handbook for details on how to get a license for development purpose. Once you've received a license, take the following step:</p> <ol> <li>Copy your license and save it as an <code>GITLAB_EE_LICENSE</code> environment variable or in a file named <code>Gitlab.gitlab-license</code>. This file is already in <code>.gitignore</code>; so it will not be included in your commit.</li> <li>Follow the steps mentioned in previous section.</li> </ol>"},{"location":"contrib/local_development/#running-acceptance-tests-using-your-own-gitlab-instance","title":"Running acceptance tests using your own GitLab instance","text":"<p>Note: GitLabForm acceptance tests operate own their own groups, projects and users and it should be safe to run them on any GitLab instance. However we do not take any responsibility for it. Please review  the code to ensure what it does and run it at your own risk!</p> <ol> <li> <p>Get an admin user API token and put it into <code>GITLAB_TOKEN</code> env variable. Do the same with your GitLab instance URL and put it into <code>GITLAB_URL</code> env variable: <pre><code>export GITLAB_URL=\"https://mygitlab.company.com\"\nexport GITLAB_TOKEN=\"&lt;my admin user API token&gt;\"\n</code></pre></p> </li> <li> <p>Run <code>pytest tests/acceptance</code> to start all tests To run only a single class with tests run f.e. <code>pytest tests/acceptance -k \"TestArchiveProject\"</code>.</p> </li> </ol>"},{"location":"contrib/local_development/#preview-docs-website-locally","title":"Preview docs website locally","text":"<p>To make mkdocs build the app website and serve it on your loopback interface do this: <pre><code>. venv/bin/activate\npip install -e '.[docs]'\nmkdocs serve\n</code></pre> ...and open the provided link (probably http://127.0.0.1:8000/) in your browser.</p>"},{"location":"contrib/local_development/#testing-types","title":"Testing types","text":"<p>Please run <code>mypy</code> to test static types: <pre><code>mypy .\n</code></pre> (You may also need to run <code>mypy --install-types --non-interactive</code>)</p>"},{"location":"contrib/local_development/#code-formatting","title":"Code formatting","text":"<p>Please run <code>black</code> to format coding style:</p> <pre><code>black .\n</code></pre>"},{"location":"contrib/releases/","title":"Releases","text":""},{"location":"contrib/releases/#versioning","title":"Versioning","text":"<p>We try to follow the PEP 440 versioning scheme, which is mostly based on semantic versioning.</p>"},{"location":"contrib/releases/#procedure","title":"Procedure","text":"<ol> <li>Make sure you're on <code>main</code> branch and it is up-to-date.</li> <li>Add an entry in changelog.md. Remember to give thanks to all the contributors! Commit this change.</li> <li> <p>Update version using <code>tbump</code>. Run <code>pipx run tbump &lt;new-semantic-version-number&gt;</code>.</p> <p>Note: You may need to install <code>pipx</code> first if it's not already installed. Follow the instructions at <code>pipx</code> documentation.</p> <p>Executing <code>tbump</code> will create a commit containing version updates to necessary files (i.e. <code>tbump.toml</code>, <code>pyproject.toml</code>), create a new tag from for the new version from the current <code>ref</code> in <code>main</code> branch, and finally push the commits and tag to remote.</p> <p>Following the above steps when a new tag is created, GitHub Action workflow will do following:</p> <ul> <li>Create a docker image containing new version of gitlabform and publish to github's package registry under gitlabform.</li> <li>Upload new version of gitlabform to pypi package registry under gitlabform.</li> <li>A corresponding GitHub release will be created that references the new tag.</li> </ul> </li> <li> <p>Edit the release in GitHub and copy the changelog entry into its description.</p> </li> </ol>"},{"location":"reference/","title":"Configuration reference","text":"<p>The whole configuration for the app needs to be in a single YAML file of any name. The default location used is the current working directory and the default name is <code>config.yml</code>.</p>"},{"location":"reference/#minimal-working-config","title":"Minimal working config","text":"<p>Here is an example of a complete small config that actually does something: <pre><code>config_version: 3\n\ngitlab:\n  url: https://gitlab.yourcompany.com\n  # alternatively use the GITLAB_TOKEN environment variable\n  token: \"&lt;private token of an admin user&gt;\"\n\nprojects_and_groups:\n  \"*\":\n    project_settings:\n      visibility: internal\n</code></pre></p>"},{"location":"reference/#mandatory-top-level-keys","title":"Mandatory top-level keys","text":"<p>The configuration has to contain the following top-level keys: <pre><code># This key is required in configs for GitLabForm version 3.x.x\n# This ensures that if the application behavior changes in a backward-incompatible way\n# you won't apply unwanted configuration to your GitLab instance.\nconfig_version: 3\n\n# GitLab API access config\ngitlab:\n  # alternatively use the GITLAB_URL environment variable for this\n  url: https://gitlab.yourcompany.com\n  # alternatively use the GITLAB_TOKEN environment variable for this\n  token: \"&lt;private token OR an OAuth2 access token of an admin user&gt;\"\n\n  # ** optional parameters - below values are defaults **\n  # whether the SSL certificate of your GitLab instance should be verified,\n  # set this to `false` if you are using a self-signed certificate (not recommended)\n  ssl_verify: true\n  # timeout for the whole requests to the GitLab API, in seconds\n  timeout: 10\n\n# Configuration to apply to GitLab projects, groups and subgroups\nprojects_and_groups:\n  # (...)\n  # See below.\n</code></pre></p>"},{"location":"reference/#projects-and-groups-configuration","title":"Projects and groups configuration","text":""},{"location":"reference/#configuration-hierarchy","title":"Configuration hierarchy","text":"<p>In GitLabForm you define the configuration for your groups and projects under the <code>projects_and_groups:</code> top-level key, on 3 levels:</p> Level name Key syntax Description common <code>\"*\"</code> the configuration that will be applied to all projects and all groups group/subgroup <code>group/*</code>, <code>group/subgroup/*</code> the configuration that will be applied to everything under a given group/subgroup, recursively (so the group/subgroup itself, all the projects in it, all the subgroups in it and all the projects in the subgroups in it) project <code>group/project</code>, <code>group/subgroup/project</code> the configuration for specific single projects <p>Each level is optional. Order does not matter.</p> <p>Example:</p> <pre><code># (...) - other mandatory top-level keys\n\nprojects_and_groups:\n  \"*\":\n    # common-level config\n\n  group_1/*:\n    # group-level config\n  group_1/project_1:\n    # project-level config\n  group_1/project_2:\n    # project-level config\n  group_1/project_3:\n    # project-level config\n\n  group_2/*:\n    # group-level config\n  group_2/project_1:\n    # project-level config\n  group_2/subgroup/*:\n    # subgroup-level config\n  group_2/subgroup/nested_project_1:\n    # project-level config\n</code></pre>"},{"location":"reference/#configuration-sections","title":"Configuration sections","text":"<p>Under each of the keys described above, we put configuration to apply for given entities. These keys are called \"sections\" within this app.</p> <p>Some configuration sections apply only to projects, some to groups.</p> <p>Syntax for each section is explained in detail on subpages - see links on the left.</p>"},{"location":"reference/#effective-configuration","title":"Effective configuration","text":"<p>To generate the effective configuration to apply for a given project or group, if it is configured on more than one level, GitLabForm will merge those configurations.</p> <p>If under the exactly same keys there are different values in the more general (f.e. common) and more specific level (f.e. group level), then the more specific configuration will overwrite the more general one.</p> <p>Example: <pre><code>projects_and_groups:\n  # common settings for ALL projects in ALL groups\n  \"*\":\n    project_settings:\n      default_branch: main\n      visibility: internal\n\n  group_1/*:\n    project_settings:\n      visibility: private # &lt;-- different value!\n</code></pre> With this configuration, for a project <code>group_1/project_1</code> the effective configuration will be like: <pre><code>project_settings:\n  default_branch: main\n  visibility: private\n</code></pre></p> <p>If there are more keys in the more specific config than in the more general one, then they are added. So for example for sections like <code>deploy_keys</code>, <code>variables</code>, <code>hooks</code> on each lower level the effective configuration will contain elements from the higher levels AND the elements from the lower levels.</p> <p>Example: <pre><code>projects_and_groups:\n  \"*\":\n    deploy_keys:\n      key_a:\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL...\n        title: global_key\n        can_push: false\n\n  group_1/*:\n    deploy_keys:\n      key_b: # &lt;-- another key under deploy_keys!\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg...\n        title: group_key\n        can_push: false\n</code></pre> With this configuration, for a project <code>group_1/project_1</code> the effective configuration will be: <pre><code>deploy_keys:\n  key_a:\n    key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL...\n    title: global_key\n    can_push: false\n  key_b:\n    key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg...\n    title: group_key\n    can_push: false\n</code></pre></p> <p>(What to do if you want have a key removed? You will need to use the \"breaking inheritance\" feature, explained in details below.)</p> <p>Warning: dicts are additive but arrays are not! The more specific arrays are always overwriting the more general ones.</p> <p>For example with this config: <pre><code>projects_and_groups:\n  \"*\":\n    merge_requests_approval_rules:\n      default:\n        approvals_required: 2\n        name: \"Team X or Y or super-user\"\n        groups:\n          - group-x\n          - group-y\n        users:\n          - super-user\n  group_1/*:\n    merge_requests_approval_rules:\n      default:\n        approvals_required: 1\n        name: \"Team Z\"\n        groups:\n          - group-z\n        users: []\n</code></pre> With this configuration, for a project <code>group_1/project_1</code> the effective configuration will be: <pre><code>merge_requests_approval_rules:\n  default:\n    approvals_required: 1\n    name: \"Team Z\"\n    groups:\n      - group-z\n</code></pre> Note that the value of <code>groups</code> is an array, so the effective <code>groups</code> contains only the single element array from <code>group_1/*</code> - the arrays were not added!</p> <p>Also note that the <code>users</code> is a key in the <code>default</code> dict, so we could not omit it. If we did that then adding would work here and <code>users</code> would be effective set to <code>[super-user]</code>. We didn't want that and that's why we did set it an explicitly empty array <code>[]</code>.</p>"},{"location":"reference/#breaking-inheritance","title":"Breaking inheritance","text":"<p>You can prevent inheriting configuration from the higher levels by placing <code>inherit: false</code> under a given section.</p> <p>Example: <pre><code>projects_and_groups:\n  \"*\":\n    deploy_keys:\n      key_a:\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL...\n        title: global_key # this name is show in GitLab\n        can_push: false\n  group_1/*:\n    deploy_keys:\n      inherit: false\n      key_b:\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg...\n        title: group_key # this name is show in GitLab\n        can_push: false\n</code></pre></p> <p>For the above configuration, for a project <code>group_1/project_1</code>, the effective configuration for the section <code>deploy_keys</code> is like defined for the project <code>group_1/project_1</code> (specific configuration), with the more generic configuration in <code>\"*\"</code> being ignored (More specific configuration will overwrite the more general one).</p> <p>In other words, it will be like this:</p> <pre><code>deploy_keys:\n  key_b:\n    key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg...\n    title: group_key # this name is show in GitLab\n    can_push: false\n</code></pre> <p>Important</p> <p><code>inherit: false</code> can be placed at ANY place in the configuration (if it makes sense).</p>"},{"location":"reference/#skipping-sections","title":"Skipping sections","text":"<p>If the only key under a section is <code>skip: true</code> then the given config section is not set AT ALL for a given entity.</p> <p>Example: <pre><code>projects_and_groups:\n  \"*\":\n    deploy_keys:\n      key_a:\n        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL...\n        title: global_key\n        can_push: false\n  group_1/*:\n    deploy_keys:\n      skip: true\n</code></pre> For the above configuration, for a project <code>group_1/project_1</code> the deploy keys are not managed by GitLabForm all.</p> <p>Important</p> <p><code>skip: true</code> can be placed ONLY directly under a section name.</p>"},{"location":"reference/#raw-parameters-passing","title":"Raw parameters passing","text":"<p>Some configuration sections, f.e. <code>project_settings</code>, will be directly send by the app via the API to specific GitLab API endpoints. This means that they key names and values are exactly like they are described in the appropriate API docs.</p> <p>These sections are appropriately marked in the reference docs.</p> <p>The advantages of this approach:</p> <ul> <li>you can use all the parameters from the API - for the <code>project_settings</code> it is over 40 parameters as of now (see the GitLab API for Projects) while for <code>group_settings</code> - it is over 20 parameters (see the GitLab API for Groups),</li> <li>whenever GitLab adds a new feature to its API and you upgrade your GitLab instance, the feature is immediately configurable with GitLabForm, without updating this app,</li> </ul> <p>The disadvantages:</p> <ul> <li>you have to read the appropriate GitLab API docs when you create your initial config for some entities, like Projects or Groups,</li> <li>if GitLab changes something in their API syntax, you will have to apply the change in your config too - there is no abstraction layer that will protect you from it.</li> </ul>"},{"location":"reference/#optional-top-level-keys","title":"Optional top-level keys","text":"<p>The configuration can, but doesn't have to contain the following top-level keys: <pre><code># list of projects that will not be processed\nskip_projects:\n  - my-group/this-project-will-not-be-processed-with-gitlabform\n  - my-group/and-this-project0too\n  - my-group/everything-under/*\n\n# list of groups that will not be processed\nskip_groups:\n  - my-other-group\n  - this-group-and-all-sub-groups/*\n</code></pre></p>"},{"location":"reference/archive_unarchive/","title":"Archive/unarchive project","text":"<p>This section purpose is to archive a project or revert this process - unarchive it.</p> <p>There can be only one key under this section - <code>archive</code> - set to <code>true</code> or <code>false</code>.</p> <p>Important</p> <p>To unarchive a project you must run GitLabForm with the <code>--include-archived-projects</code> cli parameter, as by default the app skips the archived projects when it gathers the list of projects to process.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project:\n      archive: true\n</code></pre>"},{"location":"reference/badges/","title":"Badges","text":""},{"location":"reference/badges/#project-badges","title":"Project Badges","text":"<p>This section purpose is to manage the project badges.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the badges defined here will remain in the project, all other will be deleted.</p> <p>The values are as documented at add a badge to a project endpoint, with the appropriate placeholder tokens, but we require you to define the <code>name</code> of the badge. If the only non-required value is <code>delete: true</code> then the given badge is going to be removed.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    badges:\n      coverage:\n        name: \"Coverage\"\n        link_url: \"http://example.com/ci_status.svg?project=%{project_path}&amp;ref=%{default_branch}\"\n        image_url: \"https://shields.io/my/badge\"\n      old-badge-to-delete:\n        name: \"a-badge\"\n        delete: true\n      enforce: true # optional\n</code></pre>"},{"location":"reference/badges/#group-badges","title":"Group Badges","text":"<p>This section purpose is to manage the group badges.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the badges defined here will remain in the group, all other will be deleted.</p> <p>The values are as documented at add a badge to a group endpoint, with the appropriate placeholder tokens, but we require you to define the <code>name</code> of the badge. If the only non-required value is <code>delete: true</code> then the given badge is going to be removed.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_badges:\n      group-pipeline-status:\n        name: \"Group Badge\"\n        link_url: \"https://gitlab.yourcompany.com/%{project_path}/-/commits/%{default_branch}\"\n        image_url: \"https://gitlab.yourcompany.com/%{project_path}/badges/%{default_branch}/pipeline.svg\"\n      enforce: true # optional\n</code></pre>"},{"location":"reference/ci_cd_variables/","title":"CI/CD variables","text":"<p>Please note that project-level and group-level CI/CD variables are different entities in GitLab!</p>"},{"location":"reference/ci_cd_variables/#project-cicd-variables","title":"Project CI/CD variables","text":"<p>This section purpose is to manage the project-level CI/CD variables.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the variables defined here will remain in the project, all other will be deleted.</p> <p>The values are like documented at Project-Level Variables API docs, except the id.</p> <p>You can make the:</p> <ul> <li>protected variables</li> <li>masked variables</li> <li>variables limited to the scope of specific environment(s)</li> </ul> <p>Info</p> <p>Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    variables:\n      # --- Adding/resetting\n      a_friendly_variable_name: # this is just a label\n        key: SSH_PRIVATE_KEY_BASE64\n        value: \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUl (...)\"\n\n      # --- Adding/resetting protected variable\n      my_protected_variable:\n        key: PROTECTED_VAR\n        value: \"foobar-123-123-123\"\n        protected: true\n\n      # --- Adding/resetting masked variable\n      my_masked_variable:\n        key: MASKED_VAR\n        value: \"foobar-123-123-123\"\n        masked: true\n\n      # --- Adding/resetting variables per environment\n      aws_access_key_id_for_deploying_in_production:\n        key: APP_HOST_AWS_ACCESS_KEY_ID\n        value: \"prod-value-1234\"\n        protected: true\n        masked: true\n        environment_scope: production\n        filter[environment_scope]: production\n      aws_access_key_id_for_deploying_in_staging:\n        key: APP_HOST_AWS_ACCESS_KEY_ID\n        value: \"staging-value-1234\"\n        protected: true\n        masked: true\n        environment_scope: staging\n        filter[environment_scope]: staging\n\n      # --- Deleting\n      # the below name is not used by GitLab, it's just for you\n      a_secret_you_want_to_remove:\n        key: MY_SECRET\n        delete: true\n\n      enforce: true # optional\n</code></pre>"},{"location":"reference/ci_cd_variables/#group-cicd-variables","title":"Group CI/CD variables","text":"<p>This section purpose is to manage the group-level CI/CD variables.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the variables defined here will remain in the group, all other will be deleted.</p> <p>The values are like documented at Group-Level Variables API docs, except the id.</p> <p>Although we do not provide examples like for the project-level variables, all the features like above are also supported:</p> <ul> <li>protected variables,</li> <li>masked variables,</li> <li>variables limited to the scope of specific environment(s).</li> </ul> <p>Info</p> <p>Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>Example: <pre><code>projects_and_groups:\n  group_1/*:\n    group_variables:\n      # --- Adding/resetting\n      some_secret: # this is just a label\n        key: A_NEW_PASSWORD\n        value: \"ThisIsAVerySecretPassword\"\n        variable_type: env_var # or file\n        protected: false\n\n      # --- Deleting\n      old_variable:\n        key: PASSWORD\n        delete: true\n\n      enforce: true # optional\n</code></pre></p>"},{"location":"reference/deploy_keys/","title":"Deploy keys","text":""},{"location":"reference/deploy_keys/#project-deploy-keys","title":"Project deploy keys","text":"<p>This section purpose is to manage project deploy keys.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the deploy keys defined here will remain in the project, all other will be deleted.</p> <p>The values are as documented at Deploy keys API docs, except the id.</p> <p>Notes:</p> <ul> <li>you have to always provide the whole SSH key under the <code>key</code>. This is a limitation of the GitLab API. You can see an example of this here in the docs.</li> <li>you can set the value of <code>can_push</code> only on the first assignment of the key or its creation. This is a limitation of the GitLab API. See this issue and comment for more information.</li> </ul> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    deploy_keys:\n      # --- Adding/resetting\n      a_friendly_deploy_key_name: # this is just a label\n        key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL (...)\"\n        title: ssh_key_name_that_is_shown_in_gitlab\n        can_push: false\n\n      another_friendly_deploy_key_name:\n        key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg (...)\"\n        title: other_ssh_key_name_that_is_shown_in_gitlab\n        can_push: true\n\n      # --- Deleting\n      ensure_to_remove_this_one:\n        title: different_key_title\n        delete: true\n\n      enforce: true # optional\n</code></pre>"},{"location":"reference/files/","title":"Files","text":"<p>This section purpose is to manage files in the repository. Unlike other sections it does not correspond to any single GitLab API.</p> <p>You can ensure that files with specific content ARE in the repo or that they ARE NOT in the repo, in specific branch or branches.</p> <p>Each key in this section is a path to a file in the repo and the values are dicts with keys like:</p> <ul> <li><code>overwrite</code> - if set to <code>false</code> and the file already exists, but has a different content, then it is not changed; default is <code>true</code>,</li> <li><code>skip_ci</code> - if set to <code>true</code> then the changes to a given file will be done with commits that will not trigger the CI pipeline; default is <code>false</code>,</li> <li><code>branches</code> - can be a single string <code>all</code>, string <code>protected</code> or an array of branch names,</li> <li><code>only_first_branch</code> - if set to <code>true</code> then only the first branch from the list above that exists will be processed (unless you pass <code>--strict</code> as cli parameter to the app - then it will fail when trying to process a non-existent branch),</li> <li><code>commit_message</code> - set this to a custom commit message that will be used by the app; optional,</li> <li><code>content</code> - the literal contents that should be put into the target file; use this or <code>file</code>,</li> <li><code>file</code> - the path to the file which content should be put into the target file; use this or <code>content</code>, both absolute and relative paths are supported,</li> <li><code>template</code> - if set to <code>false</code> then simple templating feature will be disabled; default is <code>true</code> and <code>{{ project }}</code> will be replaced by the project name while <code>{{ group }}</code> by a group name,</li> <li><code>jinja_env</code> - set this to a dict of key-values that will be used in the target file as a template,</li> <li><code>delete</code> - if set to <code>true</code> then the target file will be deleted, not created.</li> </ul> <p>Example 1 - initialize with a default README, if custom is not provided:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    files:\n      \"README.md\":\n        overwrite: false\n        branches:\n          - develop\n        skip_ci: true\n        content: |\n          This is a default README. Please replace it with a proper one!\n        commit_message: Set default README\n</code></pre> <p>Example 2 - unify GitLab CI pipeline config in the first branch found: develop or main: <pre><code>projects_and_groups:\n  group_1/project_1:\n    files:\n      \".gitlab-ci.yml\":\n        overwrite: true\n        branches:\n          - develop\n          - main\n        only_first_branch: true\n        content: |\n          stages:\n            - test\n\n          test:\n            image: node:6\n            stage: test\n            script:\n              - npm test\n</code></pre></p> <p>Example 3 - templates: <pre><code>projects_and_groups:\n  group_1/project_1:\n    files:\n      \"file-using-templating\":\n        branches: all\n        content: |\n          Simple templating is supported via jinja2 with two default variables\n          {{ project }} will be replaced by project name, while {{ group }} by a group name.\n          All occurrences will be replaced.\n      \"file-escape-templating\":\n        branches: all\n        template: no\n        content: |\n          {{ project }} will be rendered literally\n      \"file-with-custom-variable\":\n        branches: all\n        content: |\n          {{ foo }} and {{ bar }} are defined by you, but currently only dict is supported for jinja_env.\n          Group: {{ group }} and project: {{ project }} are always accessable by jinja.\n        jinja_env:\n          foo: \"fooz\"\n          bar: \"barz\"\n</code></pre></p> <p>Example 4 - deleting files: <pre><code>projects_and_groups:\n  group_1/project_1:\n    files:\n      \"some-path/garbage-file\":\n        delete: true\n        branches:\n          - develop\n          - main\n        only_first_branch: true\n        skip_ci: true\n</code></pre></p>"},{"location":"reference/group_ldap_links/","title":"Group LDAP links","text":"<p>Info</p> <p>This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>This section purpose is to manage group membership via LDAP.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the group LDAP links defined here will remain in the group, all other will be deleted.</p> <p>Values are like documented at LDAP Group Links section of the Groups API docs, except the id.</p> <p>The <code>provider</code> should be set to a value that can be found in the GitLab web UI, here:</p> <p></p> <p>- it's \"ldapmain\" in this example.</p> <p>The <code>access_level</code> should be set to one of the valid access levels.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_ldap_links: \n      devops_are_maintainers: # this is just a label\n        provider: AD\n        cn: devops\n        group_access: maintainer\n      app_devs_are_developers: # this is just a label\n        provider: AD\n        filter: \"(employeeType=developer)\"\n        group_access: developer\n      enforce: true # optional\n</code></pre>"},{"location":"reference/group_saml_links/","title":"Group SAML links","text":"<p>Info</p> <p>This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>This section purpose is to manage group membership via SAML group links.</p> <p>Key names here are just any labels.</p> <p>Except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the group SAML links defined here will remain in the group, all other will be deleted.</p> <p>Values are like documented at SAML Group Links section of the Groups API docs, except the id.</p> <p>The <code>saml_group_name</code> should be set to the SAML group name</p> <p>The <code>access_level</code> should be set to one of the valid access levels.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    saml_group_links: \n      devops_are_maintainers: # this is just a label\n        saml_group_name: devops\n        access_level: maintainer\n      developers_are_developers: # this is just a label\n        saml_group_name: developers\n        access_level: developer\n\n      enforce: true # optional\n</code></pre>"},{"location":"reference/integrations/","title":"Integrations","text":"<p>This section purpose is to manage the project integrations.</p> <p>The keys name are as in the endpoints described in the GitLab Integrations API docs, f.e. <code>pipelines-email</code>, <code>jira</code> etc.</p> <p>The values are like the params for a given integration, as described in the same doc OR a single special value <code>delete: true</code> causing the given integration to be removed.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    integrations:\n      slack:\n        delete: true\n      drone-ci:\n        delete: true\n      jira:\n        active: true\n        url: https://jira.yourcompany.com\n        username: foo # this is required by this integration, even if it's not used\n        password: bar # this is required by this integration, even if it's not used\n</code></pre>"},{"location":"reference/job_token_scope/","title":"CI/CD job token scope","text":""},{"location":"reference/job_token_scope/#project-cicd-job-token-scope","title":"Project CI/CD job token scope","text":"<p>This section purpose is to manage the project CI/CD job token scope</p> <p>The values are like documented at Job Token Scope API docs, except the Enabled.</p> <p>We use <code>limit_access_to_this_project</code> as the variable name for restricting access to the Project from other projects, rather than <code>inbound_enabled</code> in the GET and <code>enabled</code> in the PATCH requests defined in the api, in line with GitLab's UI and intended language.</p> <p>You can:</p> <ul> <li>Limit access to a project</li> <li>Add other projects to the job token allowlist</li> <li>Add groups to the job token allowlist</li> </ul> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    job_token_scope:\n      limit_access_to_this_project: true\n      allowlist:\n        enforce: true # When enforce enabled, projects/groups set in GitLab but not in Config will be removed from allowlists\n        projects:\n          - 123 # Add by project ID\n          - group-bar/project-foo # Add by Path/Name\n        groups:\n          - 5 # Add by group ID\n          - group-bar # Add by Group Name (will include all sub-groups)\n          - group-abc/subgroup-xyz # Add Subgroup \n</code></pre>"},{"location":"reference/labels/","title":"Labels","text":"<p>This section purpose is to manage labels both project and group</p>"},{"location":"reference/labels/#project-labels","title":"Project Labels","text":"<p>The keys name are as in the endpoints described in the GitLab Labels API docs, f.e. <code>description</code>, <code>color</code> etc.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    labels:\n      my_label:\n        color: red\n        description: hello world\n</code></pre> <p><code>enforce</code> is used to determine whether labels present in GitLab but not the configuration should be deleted or not. Without enabled <code>enforce: true</code> we retain any labels not present in the configuration, to support automated tooling which may apply labels based on user's rulesets and work practices, such as for Compliance Frameworks.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    labels:\n      enforce: true\n      my_label:\n        color: red\n        description: hello world\n</code></pre> <p>The same project labels can be applied to all projects in a group using the following syntax:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    labels:\n      my_label:\n        color: red\n        description: hello world\n</code></pre>"},{"location":"reference/labels/#group-labels","title":"Group Labels","text":"<p>The keys name are as in the endpoints described in the GitLab Group Labels API docs, f.e. <code>description</code>, <code>color</code> etc.</p> <p>We use <code>group_labels</code> as the key within the configuration to disambiguate from labels being applied to the Group and labels being applied to all Projects in a Group.</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_labels:\n      my_label:\n        color: red\n        description: hello world\n</code></pre> <p><code>enforce</code> is used to determine whether labels present in GitLab but not the configuration should be deleted or not. Without enabled <code>enforce: true</code> we retain any labels not present in the configuration, to support automated tooling which may apply labels based on user's rulesets and work practices, such as for Compliance Frameworks.</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_labels:\n      enforce: true\n      my_label:\n        color: red\n        description: hello world\n</code></pre>"},{"location":"reference/members/","title":"Members","text":"<p>These sections are for managing the users and groups that are members of a projects and groups.</p>"},{"location":"reference/members/#project-members","title":"Project members","text":"<p>There are 4 keys that can be set in the <code>members</code> section:</p> <ul> <li><code>groups</code> - to make other groups members of a given group. Here the key names are group paths and values are as described in the share project with a group endpoint of the Projects API,</li> <li><code>users</code> - to add single users. Here the key names are usernames and the values are as described in the add member to a group or project endpoint of the Group and project members API,</li> <li><code>enforce</code> - if set to <code>true</code> then this project will have ONLY the users and groups listed in the configuration as the direct members (so this setting will NOT affect the members inherited f.e. from a group that contains this project); default is <code>false</code>.</li> <li><code>keep_bots</code> - if set to <code>true</code> then any existing project members that are bots will not be removed regardless of the <code>enforce</code> setting; default is <code>false</code>.</li> </ul> <p>Note: there has to be at least 1 user/group with \"owner\" access level per project - it's required by GitLab.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    members:\n      groups:\n        my-group:\n          group_access: maintainer\n        my-other-group/subgroup:\n          group_access: maintainer\n      users:\n        my-user:\n          access_level: maintainer\n          expires_at: 2025-09-26\n      enforce: true\n      keep_bots: true\n</code></pre>"},{"location":"reference/members/#custom-roles-gitlab-ultimate-only","title":"Custom Roles (GitLab Ultimate Only)","text":"<p>Assigning of Custom Roles to Project <code>members</code> is supported within GitLabForm configuration.</p> <p><code>member_role</code> parameter can be supplied as either the name or id. </p> <p>Support is provided for both SaaS and Self-Managed/Dedicated deployments of GitLab; GitLabForm will determine which Member Roles API to query</p> <p>Warning</p> <ul> <li>user <code>access_level</code> MUST still be supplied and MUST match the base_access_level of the custom role</li> </ul> <pre><code>projects_and_groups:\n  group_1/project_1:\n    members:\n      users:\n        my-user:\n          access_level: maintainer\n          member_role: 2\n          expires_at: 2025-09-26\n      enforce: true\n      keep_bots: true\n</code></pre> <pre><code>projects_and_groups:\n  group_1/project_1:\n    members:\n      users:\n        my-user:\n          access_level: maintainer\n          member_role: Limited_Maintainer\n          expires_at: 2025-09-26\n      enforce: true\n      keep_bots: true\n</code></pre>"},{"location":"reference/members/#group-members","title":"Group members","text":"<p>There are 4 keys that can be set in the <code>group_members</code> section:</p> <ul> <li><code>groups</code> - to make other groups members of a given group. Here the key names are group paths and values are as described in the create a link to share a group with another group endpoint of the Groups API,</li> <li><code>users</code> - to add single users. Here the key names are usernames and the values are as described in the add member to a group or project endpoint of the Group and project members API,</li> <li><code>enforce</code> - if set to <code>true</code> then removing a user or group from this config will also remove them from the group (so this setting will NOT affect the members inherited f.e. from a group that contains this group); default is <code>false</code>.</li> <li><code>keep_bots</code> - if set to <code>true</code> then any existing group members that are bots will not be removed regardless of the <code>enforce</code> setting; default is <code>false</code>.</li> </ul> <p>Note: there has to be at least 1 user/group with \"owner\" access level per group - it's required by GitLab.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_members:\n      groups:\n        another-group:\n          group_access: no access\n      users:\n        my-user:\n          access_level: owner\n      enforce: true\n      keep_bots: false\n</code></pre>"},{"location":"reference/members/#custom-roles-gitlab-ultimate-only_1","title":"Custom Roles (GitLab Ultimate Only)","text":"<p>Assigning of Custom Roles to <code>group_members</code> is supported within GitLabForm configuration.</p> <p><code>member_role</code> parameter can be supplied as either the name or id. </p> <p>Support is provided for both SaaS and Self-Managed/Dedicated deployments of GitLab; GitLabForm will determine which Member Roles API to query</p> <p>Warning</p> <ul> <li>user <code>access_level</code> MUST still be supplied and MUST match the base_access_level of the custom role</li> </ul> <pre><code>projects_and_groups:\ngroup_1/*:\n    group_members:\n      groups:\n        another-group:\n          group_access: no access\n      users:\n        my-user:\n          access_level: owner\n          member_role: 2\n      enforce: true\n      keep_bots: false\n</code></pre> <pre><code>projects_and_groups:\ngroup_1/*:\n    group_members:\n      groups:\n        another-group:\n          group_access: no access\n      users:\n        my-user:\n          access_level: owner\n          member_role: Dev_ReadOnly\n      enforce: true\n      keep_bots: false\n</code></pre>"},{"location":"reference/merge_requests/","title":"Merge Requests","text":"<p>Info</p> <p>This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>New</p> <p>The syntax described below has been introduced in v3.4.0 of GitLabForm. The old syntax, that used to be documented here, will still supported until the release of v4.* of GitLabForm, but is deprecated and you should migrate to the new one.</p> <p>These sections' purpose is to manage the project-Level Merge Requests configuration and rules.</p>"},{"location":"reference/merge_requests/#configuration","title":"Configuration","text":"<p>The section <code>merge_requests_approvals</code> keys are as documented at GitLab's project-level Merge Request approvals API, change configuration.</p> <p>Note that under it the deprecated key <code>approvals_before_merge</code> is NOT allowed in GitLabForm - please use the <code>approvals_required</code> field in the specific rules instead (see below.)</p> <p>Note</p> <p>Some Merge Requests-related settings are also set in the project settings.</p>"},{"location":"reference/merge_requests/#rules","title":"Rules","text":"<p>In the <code>merge_requests_approval_rules</code> section, key names are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the rules defined here will remain in the project, all other will be deleted.</p> <p>Under each key the contents are as documented at GitLab's project-level Merge Request approvals API, create project-level rule, but additionally, you may use these keys:</p> <ul> <li><code>users</code> - an array of usernames,</li> <li><code>groups</code> - an array of group/subgroup paths,</li> <li><code>protected_branches</code> - an array of branch names.</li> </ul> <p>...instead of the built-in keys <code>user_ids</code>, <code>group_ids</code>, <code>protected_branch_ids</code> which require you to provide the internal ids of these entities. </p> <p>Warning</p> <p>If any of the users or groups is not a member of the project, they cannot be approvers. However GitLab will NOT fail with an error in such case - it's will silently ignore these users and groups. This is GitLab's limitation, not GitLabForm's.</p>"},{"location":"reference/merge_requests/#examples","title":"Examples","text":"<p>Example 1 - a single approval rule where all the project members can approve, but no approval is required to merged the MR.</p> <p>Note that <code>rule_type: any_approver</code> field makes it a special kind of rule where you don't have to reference specific users or groups. Also note that you can combine it with any number in <code>approvals_required</code> and any <code>name</code>.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: true\n    merge_requests_approval_rules:\n      any: # this is just a label\n        approvals_required: 0\n        name: \"Any member\"\n        rule_type: any_approver\n      enforce: true\n</code></pre> <p>Example 2 - a single approval rule that requires at least 2 approval from the following approvers: <code>user1</code>, <code>user2</code> and/or the members of the group <code>my-group</code> who will be called \"Special approvers\" in the GitLab's web UI:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: true\n    merge_requests_approval_rules:\n      default: # this is just a label\n        approvals_required: 2\n        name: \"Special approvers\"\n        users:\n          - user1\n          - user2\n        groups:\n          - my-group\n      enforce: true\n</code></pre> <p>Example 3 - two approval rules:</p> <ul> <li>one that requires at least 1 approval from any member of the <code>security-team</code> group, who will be called \"Security Team\" in the GitLab's web UI,</li> <li>second that requires at least 1 approval from any of the project members, who will be called \"Any member\" in the GitLab's web UI.</li> </ul> <pre><code>projects_and_groups:\n  group_1/project_1:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: true\n    merge_requests_approval_rules:\n      security: # this is just a label\n        approvals_required: 1\n        name: \"Security Team\"\n        groups:\n          - security-team\n      any: # this is just a label\n        approvals_required: 1\n        name: \"Any member\"\n        rule_type: any_approver\n      enforce: true\n</code></pre> <p>Example 4 - two approval rules:</p> <ul> <li>one that requires at least 1 approval from <code>senior-sre-1</code> and/or <code>senior-sre-2</code>, who will be called \"Senior SRE\" in the GitLab's web UI, but this rule will apply only to MRs to the protected branches <code>production</code> and <code>staging</code>,</li> <li>second that requires at least 1 approval from any of the project members, who will be called \"Any member\" in the GitLab's web UI.</li> </ul> <pre><code>projects_and_groups:\n  group_1/project_1:\n    merge_requests_approvals:\n      disable_overriding_approvers_per_merge_request: true\n    merge_requests_approval_rules:\n      senior: # this is just a label\n        approvals_required: 1\n        name: \"Senior SRE\"\n        users:\n          - senior-sre-1\n          - senior-sre-2\n        protected_branches:\n          - production\n          - staging\n      any: # this is just a label\n        approvals_required: 1\n        name: \"Any member\"\n        rule_type: any_approver\n      enforce: true\n</code></pre>"},{"location":"reference/pipeline_schedules/","title":"Pipeline schedules","text":""},{"location":"reference/pipeline_schedules/#basic-use","title":"Basic use","text":"<p>This section purpose is to manage the pipeline schedules.</p> <p>The key name are schedule description (GitLab Web Console) and values are parameters described in the Pipeline schedules API docs, except the id.</p> <p>Additionally, under a <code>variables</code> key you can add the pipeline schedule variables. The syntax here is that key name is the variable name, the value is under <code>value</code> and the optional <code>variable_type</code> can be set to <code>env_var</code> (default) or <code>file</code>.</p> <p>Warning</p> <ul> <li> <p>If there are multiple pipeline schedules with the same key name in a single project, this will cause those schedules to be DELETED and replaced with the one from the configuration.</p> </li> <li> <p>Do not set <code>description</code> attribute - see #535</p> </li> </ul> <p>There are 2 gitlabform specific keys/configs that can be set under <code>schedules</code> or individual schedule:</p> <ul> <li><code>delete</code> - set this to <code>true</code> under a specific schedule to delete that particular schedule.</li> <li><code>enforce</code> - set this to <code>true</code> under <code>schedules</code> so that any schedules that are not in <code>schedules</code> section are deleted.</li> </ul> <p>Warning</p> <ul> <li> <p>Both a short version of a ref (e.g \"main\") and full version (e.g. \"refs/heads/main\") is accepted, GitLab will automatically expand short refs into full refs.</p> </li> <li> <p>If the short ref is ambigious it will be rejected: https://docs.gitlab.com/ee/api/pipeline_schedules.html#create-a-new-pipeline-schedule</p> </li> <li> <p>This appears to be more stringently enforced within GitLab 17.x</p> </li> </ul> <p>Example 1: <pre><code>projects_and_groups:\n  group_1/project_1:\n    schedules:\n      \"Some schedule\":\n        ref: main\n        cron: \"0 * * * MON-FRI\"\n        cron_timezone: \"London\"\n        active: false\n      \"Another schedule\":\n        ref: develop\n        cron: \"0 * * * *\"\n        variables:\n          some_variable:\n            value: some_value\n            variable_type: file\n          other_variable:\n            value: another_value\n      \"Obsolete schedule\":\n        delete: true  # Delete this schedule\n</code></pre></p> <p>Example 2: <pre><code>projects_and_groups:\n  group_1/project_1:\n    schedules:\n      enforce: true  # Delete all other pipeline schedules that exists for this project\n      \"Some schedule\":\n        ref: main\n        cron: \"0 * * * MON-FRI\"\n        cron_timezone: \"London\"\n        active: false\n</code></pre></p>"},{"location":"reference/pipeline_schedules/#extended-syntax","title":"Extended syntax","text":"<ul> <li>There is an additional, extended syntax available for distributing pipelines automatically to avoid a pipeline stampede, see the open issue at GitLab for some details.</li> <li>For minutes, hours and weekdays the uppercase letter \u02daH will be replaced with stable, project specific values in the range of <code>0-59</code>, <code>0-23</code> resp <code>0-6</code>.</li> <li>There is a syntax for restricting the range: <code>H(15-20)</code> will return a value between 15 and 20.</li> <li>An interval like <code>H/20</code> e.g. in the minute column will firstly determine a value between 0 and 19 and then add corresponding entries to fill the as well, i.e. might give you <code>14,34,54</code> for the minutes. </li> <li>This allows you to specify something like <code>H H(1-7) * * *</code> once as expression and each project will nonetheless get a different value for minute and hour, so your pipelines are distributed between 01:00 and 07:59 in above example.</li> </ul> <p>Examples:</p> <ul> <li>Project with id 1: <code>H H * * *</code> -&gt; <code>8 18 * * *</code></li> <li>Project with id 3: <code>H H * * *</code> -&gt; <code>15 18 * * *</code></li> <li>Project with id 3: <code>H(15-20),H(45-50) H(1-7) * * *</code> -&gt; <code>16,49 5 * * *</code></li> <li>Project with id 4: <code>H H * * *</code> -&gt; <code>15 9 * * *</code></li> </ul> <p>There are four (caseinsensitive) aliases for ease of use similar to what exists in Jenkins:</p> <ul> <li><code>@hourly</code> -&gt; <code>H * * * *</code></li> <li><code>@daily</code> -&gt; <code>H H * * *</code></li> <li><code>@weekly</code> -&gt; <code>H H * * H</code></li> <li><code>@nightly</code> -&gt; <code>H H(00-06) * * *</code></li> </ul>"},{"location":"reference/project_security_settings/","title":"Project Security Settings","text":"<p>Info</p> <p>This section requires GitLab Ultimate (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>This section purpose is to manage project security settings, especially secret push protection.</p> <p>On Gitlab Dedicated and Self-managed instances, you must allow secret push protection before you can enable it in a project</p> <p>Values are documented at LDAP Group Links section of the Groups API docs.</p>"},{"location":"reference/project_security_settings/#example","title":"Example","text":"<pre><code>projects_and_groups:\n  group_1/project_1:\n    project_security_settings:\n      pre_receive_secret_detection_enabled: true\n</code></pre>"},{"location":"reference/project_transfer/","title":"Transfer a resource","text":""},{"location":"reference/project_transfer/#project-transfer","title":"Project transfer","text":"<p>This section describes transferring a project to another group or namespace.</p> <p>Gitlabform supports <code>transfer_from</code> key under <code>project</code> map. Set the value to full path of the project including namespaces that needs to be transferred. See examples below.</p> <p>Important</p> <p>Please note that Gitlab has specific requirements for project transfer. For example the user that runs gitlabform needs to be an owner of the project that will be transferred. See above docs referrence for detailed lists of prerequisites.</p>"},{"location":"reference/project_transfer/#examples","title":"Examples","text":"<p>In the example below, <code>group_2/project_1</code> project is configured to be transferred to <code>group_1</code> namespace.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project:\n      transfer_from: group_2/project_1\n</code></pre> <p>In subsequent runs of gitlabform, the transfer config will not take place because <code>group_1/project_1</code> already exists. Transfers can be done from subgroup or another root group/namespace too.</p> <pre><code>projects_and_groups:\n  group_1/foo/project_1:\n    project:\n      transfer_from: group_1/project_1\n\n  group_1/project_2:\n    project:\n      transfer_from: group_1/bar/project_2\n</code></pre>"},{"location":"reference/project_transfer/#transfer-as-new-project-path","title":"Transfer as new project path","text":"<p>It's also possible to change the project's path at the new location. In the example below, <code>project_1</code> path will be updated to <code>project_2</code> first and then transfer the project from the source group/namespace.</p> <pre><code>projects_and_groups:\n  group_1/project_2:\n    project:\n      transfer_from: group_2/project_1\n</code></pre> <p>Note that if <code>group_1</code> already contains a project with a path <code>project_2</code>, the transfer will not take place.</p>"},{"location":"reference/project_transfer/#transfer-and-update","title":"Transfer and update","text":"<p>Gitlabform processes different sections of a project's config in specific order. The <code>project</code> map/section is processed first. So, it's possible to transfer a project from another namespace first and then update that project according to the config.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project:\n      transfer_from: group_2/project_1\n    project_settings:\n      description: Hello world!\n      # other project settings can be here\n    branches:\n      main:\n        protected: true\n        # other branch protection settings can be here\n</code></pre> <p>In the above example, <code>project_1</code> will be transferred from <code>group_2</code> to <code>group_1</code> first and then it will be updated according to rest of the configs.</p>"},{"location":"reference/project_transfer/#transfer-and-archive","title":"Transfer and archive","text":"<p>Within the <code>project</code> map of a project's config, gitlabform processes <code>transfer_from</code> first. This gives additional flexibility.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project:\n      archive: true\n      transfer_from: group_2/project_1\n</code></pre> <p>In the above example, the project will be transferred first and then it will be archived at the new location.</p> <p>Also, Gitlab allows transferring a project or updating its path that is already archived. In the following example, if <code>group_2/project_1</code> is already archived, gitlabform will transfer the project to <code>group_1/foo-bar</code> and then unarchive it. Note that the project's path is changed from <code>project_1</code> to <code>foo-bar</code>.</p> <pre><code>projects_and_groups:\n  group_1/foo-bar:\n    project:\n      archive: false\n      transfer_from: group_2/project_1\n</code></pre>"},{"location":"reference/protected_branches/","title":"Protected branches","text":"<p>This section purpose is to manage the protected branches.</p>"},{"location":"reference/protected_branches/#common-features","title":"Common features","text":"<p>The key names here may be:</p> <ul> <li>exact branch names,</li> <li>branch names using wildcards,</li> </ul> <p>The values:</p> <ul> <li>have to contain a <code>protected</code> key set to <code>true</code> or <code>false</code>,</li> <li>if <code>protected: true</code>, then you can configure the protection using:<ul> <li><code>push_access_level</code>, <code>merge_access_level</code>, <code>unprotect_access_level</code> keys, each set to one of the valid access levels that will be the minimal access level required for a given action,</li> <li>(optional) <code>allow_force_push</code> key set to <code>true</code> or <code>false</code>,</li> </ul> </li> </ul> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    branches:\n      # Keep this branch unprotected\n      develop:\n        protected: false\n      # Allow merging by developers, but no direct commits\n      main:\n        protected: true\n        push_access_level: no access\n        merge_access_level: developer\n        unprotect_access_level: maintainer\n      # Disallow any changes to this branch\n      special_protected_branch:\n        protected: true\n        push_access_level: no access\n        merge_access_level: no access\n        unprotect_access_level: maintainer\n      # Protect branches with names matching wildcards\n      '*-some-name-suffix':\n        protected: true\n        push_access_level: no access\n        merge_access_level: developer\n        unprotect_access_level: maintainer\n      # Protect the branch but allow force pushes\n      allow_to_force_push:\n        protected: true\n        push_access_level: no access\n        merge_access_level: developer\n        unprotect_access_level: maintainer\n        allow_force_push: true\n</code></pre>"},{"location":"reference/protected_branches/#premium-only-features","title":"Premium-only features","text":"<p>Info</p> <p>Below syntax and features require GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>In GitLab Premium instances you can also use the following extra keys under each branch:</p> <ul> <li><code>code_owner_approval_required</code> set to <code>true</code> or <code>false</code>,</li> <li><code>allowed_to_push</code>, <code>allowed_to_merge</code>, <code>allowed_to_unprotect</code> keys that can be set to the arrays containing any combination of:<ul> <li><code>user</code> set to username,</li> <li><code>user_id</code> set to user id,</li> <li><code>group</code> set to group name (path),</li> <li><code>group_id</code> set to group id,</li> <li><code>access_level</code> set to valid access level</li> </ul> </li> </ul> <p>Note that you should NOT use both <code>*_access_level</code> and <code>allowed_to_*</code> keys - the result could be ambiguous, please choose the first or the second set.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    branches:\n      # Require code approvals, merge for developers, no direct commits\n      extra:\n        protected: true\n        push_access_level: no access\n        merge_access_level: developer\n        unprotect_access_level: maintainer\n        code_owner_approval_required: true\n      # Allow specific users and groups to operate on this branch\n      special:\n        protected: true\n        allowed_to_push:\n          - user: jsmith # you can use usernames...\n          - user: bdoe\n          - group: another-group # ...or group names (paths)...\n        allowed_to_merge:\n          - user_id: 15 # ...or user ids, if you know them...\n          - group_id: 456 # ...or group ids, if you know them...\n        allowed_to_unprotect:\n          - access_level: maintainer # ...or the whole access levels\n</code></pre>"},{"location":"reference/protected_environments/","title":"Protected environments","text":"<p>Info</p> <p>This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>This section purpose is to manage the project protected environments.</p> <p>Key names here are just any labels, except if the key name is <code>enforce</code> and is set to <code>true</code> - then only the protected environments defined here will remain in the project, all other will be deleted.</p> <p>The supported values are like documented in the protect environment endpoint of the Protected environments API, with the following changes:</p> <ul> <li><code>user</code> with a username can be used instead of <code>user_id</code> with a user id,</li> <li><code>group</code> with a group name can be used instead of <code>group_id</code> with a group id.</li> <li><code>access_level</code> can have a string from the valid access levels as a value instead of just a number,</li> <li>using <code>approval_rules</code> may work but this has not been tested yet, </li> </ul> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    protected_environments:\n      enforce: true\n      env_1: # name of the environment\n        deploy_access_levels: &amp;example_anchor_to_reuse_this_cfg\n          - access_level: maintainer\n          - user: johndoe\n          - user_id: 1234\n      env_2: # name of the environment\n        deploy_access_levels: *example_anchor_to_reuse_this_cfg\n</code></pre>"},{"location":"reference/push_rules/","title":"Push rules","text":"<p>Info</p> <p>This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p>"},{"location":"reference/push_rules/#group-push-rules","title":"Group Push rules","text":"<p>This section purpose is to manage the group push rules.</p> <p>The settings should be as documented at GitLab's Push rules section of the Groups API docs, except the id.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/*:\n    group_push_rules:\n      commit_message_regex: '(.|\\s)*\\S(.|\\s)*'\n      member_check: false\n      commit_committer_check: true\n      commit_committer_name_check: true\n</code></pre>"},{"location":"reference/push_rules/#project-push-rules","title":"Project Push rules","text":"<p>This section purpose is to manage the project push rules.</p> <p>The settings should be as documented at GitLab's Push rules section of the Projects API docs, except the id.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project_push_rules:\n      commit_message_regex: 'Fixes \\d +'\n      branch_name_regex: \"\"\n      deny_delete_tag: false\n      member_check: false\n      prevent_secrets: false\n      author_email_regex: \"\"\n      file_name_regex: \"\"\n      max_file_size: 0 # in MB, 0 means unlimited\n</code></pre>"},{"location":"reference/resource_groups/","title":"Resource Groups","text":""},{"location":"reference/resource_groups/#prerequisite","title":"Prerequisite","text":"<p>A resource group must exist before the process mode can be updated, except if the key name <code>ensure_exists</code> is present and is set to <code>false</code>.</p> <p>Add a resource group to a project by configuring it in your project's <code>gitlab-ci.yml</code> file. For more information, visit the appropriate GitLab's docs.</p>"},{"location":"reference/resource_groups/#update-process-mode","title":"Update Process Mode","text":"<p>This section's purpose is to manage the resource group process modes.</p> <p>The key name <code>ensure_exists</code> is optional - if set to <code>false</code> it will not fail when trying to process a non-existent resource group; default is <code>true</code>.</p> <p>The other key names are the resource group names associated with the project. The value for each key name is a key-value pair, with <code>process_mode</code> as the key and the value is one of the process  modes defined here.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    resource_groups:\n      ensure_exists: false\n      staging: \n        process_mode: oldest_first\n      production: \n        process_mode: newest_first\n      resource_group_that_dont_exist:\n        process_mode: newest_first\n</code></pre>"},{"location":"reference/settings/","title":"Settings","text":""},{"location":"reference/settings/#application-settings","title":"Application Settings","text":"<p>This section purpose it to manage the Application settings.</p> <p>You can provide any number of the settings from there - if you don't provide a setting then it will be not changed.</p> <p>Example:</p> <pre><code>application:\n  settings:\n    asset_proxy_allowlist: [\"example.com\", \"*.example.com\", \"your-instance.com\"]\n    require_two_factor_authentication: true\n    two_factor_grace_period: 2\nprojects_and_groups:\n  group_1/project_1:\n    project_settings:\n      default_branch: main\n</code></pre>"},{"location":"reference/settings/#project-settings","title":"Project Settings","text":"<p>This section purpose is to manage the project settings.</p> <p>The settings should be as documented at GitLab's Project API docs, except the id.</p> <p>You can provide any number of the settings from there - if you don't provide a setting then it will be not changed.</p> <p>Note that some keys and values can be very complex here - see the Container Registry cleanup policies under the <code>container_expiration_policy_attributes</code> key in the code below as an example.</p> <p>Note</p> <p>Some Merge Requests-related settings are also set here.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    project_settings:\n      default_branch: main\n      builds_access_level: enabled\n      visibility: internal\n      only_allow_merge_if_pipeline_succeeds: true\n      only_allow_merge_if_all_discussions_are_resolved: true\n      container_expiration_policy_attributes:\n        cadence: \"1month\"\n        enabled: true\n        keep_n: 1\n        older_than: \"14d\"\n        name_regex: \"\"\n        name_regex_delete: \".*\"\n        name_regex_keep: \".*-main\"\n      # (...)\n</code></pre>"},{"location":"reference/settings/#project-settings-topics","title":"Project Settings - Topics","text":"<p>GitLab's project settings API takes a list of string to be used as project topics. It will overwrite any existing topics that may exist. GitLabForm allows special configuration if finer control is needed for managing project topics.</p> <p>Generally a list of string under <code>topics</code> will be used as-is. Those strings will be set as project topics.</p> <p>GitLabForm will accept additional configuration under <code>topics</code>. An item in the list can be an object whose key is <code>keep_existing</code> that expects boolean value. If this object is set and the value is set to <code>true</code>, existing topics will be kept by including them in the list of project topics when they are updated via GitLab API.</p> <p>If a specific topic should be deleted, it can be configured as an object containing <code>delete: true</code>. See the example below.</p> <p>Examples:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    projects_settings:\n      topics:\n        - keep_existing: true\n        - topicA\n        - topicB\n        - topicC:\n            delete: true\n</code></pre>"},{"location":"reference/settings/#group-settings","title":"Group Settings","text":"<p>This section purpose is to manage the group settings.</p> <p>The settings should be as documented at GitLab's Groups API docs, except the id.</p> <p>You can provide any number of the settings from there - if you don't provide a setting then it will be not changed.</p> <pre><code>projects_and_groups:\n  group_1/*:\n    # configures settings for the 'group-with-spammy-projects' group\n    group_settings:\n      # keys and values here are as described at https://docs.gitlab.com/ee/api/groups.html#update-group\n      emails_disabled: true\n</code></pre>"},{"location":"reference/tags_protection/","title":"Tags protection","text":"<p>This section purpose is to protect and unprotect the project tags.</p> <p>It works using the Protected tags API and its syntax is loosely based on it.</p>"},{"location":"reference/tags_protection/#common-features","title":"Common features","text":"<p>The keys are the exact names of the tag or wildcards.</p> <p>The values are:</p> <ul> <li><code>protected</code>: <code>true</code> or <code>false</code>,</li> <li>(optional) <code>create_access_level</code>: minimal access levels allowed to create (default: <code>maintainer</code>, allowed: <code>no access</code>, <code>developer</code>, <code>maintainer</code>)</li> </ul> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    tags:\n      \"v*\":\n        protected: true\n        create_access_level: developer\n      \"some-old-tag\":\n        protected: false\n</code></pre>"},{"location":"reference/tags_protection/#premium-only-features","title":"Premium-only features","text":"<p>Info</p> <p>Below syntax and features require GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.)</p> <p>In GitLab Premium instances you can also use the following extra keys under each branch:</p> <ul> <li><code>allowed_to_create</code> key that can be set to the arrays containing any combination of:<ul> <li><code>user</code> set to username,</li> <li><code>user_id</code> set to user id,</li> <li><code>group</code> set to group name (path),</li> <li><code>group_id</code> set to group id,</li> <li><code>access_level</code> set to valid access level</li> </ul> </li> </ul> <p>Note that you should NOT use both <code>create_access_level</code> and <code>access_level</code> key under <code>allowed_to_create</code> - the result could be ambiguous, please choose the first or the second set.</p> <p>Example:</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    tags:\n      # Allow specific users, groups, or roles to create this tag\n      release-*:\n        protected: true\n        allowed_to_create:\n          - user: jsmith # you can use usernames...\n          - user: bdoe\n          - group: another-group # ...or group names (paths)...\n          - user_id: 15 # ...or user ids, if you know them...\n          - group_id: 456 # ...or group ids, if you know them...\n          - access_level: no access # do not allow creating tag by role (only specific user or group)\n      alpha-release-by-devs-*:\n        protected: true\n        allowed_to_create:\n          - access_level: developer\n          - user: jsmith # you can use usernames...\n          - user: 15\n</code></pre>"},{"location":"reference/webhooks/","title":"Webhooks","text":""},{"location":"reference/webhooks/#project-webhooks","title":"Project Webhooks","text":"<p>This section purpose is to manage the Webhooks (aka Project Hooks).</p> <p>The key names here are webhook URLs, except if the key name is <code>enforce</code> and is set to <code>true</code> - in this case only the hooks defined here will remain in the project, all others will be deleted. When <code>enforce</code> is false, or not set, individual hooks can be deleted by setting their value to <code>delete: true</code>. The other values of the URL keys are the parameters described at edit a project webhook, except the id and hook_id.</p>"},{"location":"reference/webhooks/#examples","title":"Examples","text":"<p>Example 1: only the first hook will be deleted. Here, omitting the <code>enforce</code> key altogether achieves the same result.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    hooks:\n      enforce: false\n      \"http://host.domain.com/some-old-hook-you-want-to-remove-from-config\":\n        delete: true\n      \"http://127.0.0.1:5000/hooks/merge_request\":\n        push_events: false # this is set to true by GitLab API by default\n        merge_requests_events: true\n        token: some_secret_auth_token\n</code></pre> <p>Example 2: here all hooks previously set in the <code>group_1/project_1</code> project will be removed, except <code>http://127.0.0.1:5000/hooks/merge-request</code> will remain.</p> <pre><code>projects_and_groups:\n  group_1/project_1:\n    hooks:\n      enforce: true\n      \"http://127.0.0.1:5000/hooks/merge-request\":\n        push_events: false\n        merge_requests_events: true\n</code></pre> <p>Example 3: here <code>enforce: true</code> is applied to the hooks of all projects within <code>group-1</code>: for each of these the <code>example.hook.url</code> hook will be created/updated and all others will be removed, unless further specified - in <code>project-1</code> the <code>special-hook.net</code> hook will also be added/kept and all others deleted (so that <code>project-1</code> ends up with just these 2 hooks).</p> <pre><code>group-1/*:\n  hooks:\n    enforce: true\n    https://example.hook.url:\n      push_events: true\ngroup-1/project-1:\n  hooks:\n    https://special-hook.net:\n      job_events: true\n</code></pre>"},{"location":"reference/webhooks/#group-webhooks","title":"Group Webhooks","text":"<p>This section purpose is to manage the Group Webhooks.</p> <p>The key names here are webhook URLs, except if the key name is <code>enforce</code> and is set to <code>true</code> - in this case only the hooks defined here will remain in the group, all others will be deleted. When <code>enforce</code> is false, or not set, individual hooks can be deleted by setting their value to <code>delete: true</code>. The other values of the URL keys are the parameters described at edit a group webhook, except the id and hook_id.</p>"},{"location":"reference/webhooks/#examples_1","title":"Examples","text":"<pre><code>projects_and_groups:\n  group-1/*:\n    group_hooks:\n      \"http://127.0.0.1:5000/hooks/merge_request\":\n        push_events: false\n        merge_requests_events: true\n        token: some_secret_auth_token\n</code></pre>"}]}