name: Releases

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:

  linters:
    uses: ./.github/workflows/linters.yml
    with:
      BRANCH_REF: ${{ github.ref }}

  tests-standard:
    uses: ./.github/workflows/tests-standard.yml
    with:
      BRANCH_REF: ${{ github.ref }}

  tests-premium:
    uses: ./.github/workflows/tests-premium.yml
    with:
      BRANCH_REF: ${{ github.ref }}
    secrets: inherit

  tests-ultimate:
    uses: ./.github/workflows/tests-ultimate.yml
    with:
      BRANCH_REF: ${{ github.ref }}
    secrets: inherit

  publish-docs:
    needs:
      - linters
      - tests-standard
      - tests-premium
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          pip install -e .[docs]
      - name: Build docs
        run: |
          mkdocs build
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.7.2
        with:
          branch: gh-pages
          folder: site

  publish-to-github:
    needs:
      - linters
      - tests-standard
      - tests-premium
    runs-on: ubuntu-latest
    steps:
      - name: Create release in GitHub
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.ref }}
          body: "(this is a placeholder, it will be replaced with a changelog contents)"
          # This token is provided by Actions, you do not need to create your own token
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    needs:
      - linters
      - tests-standard
      - tests-premium
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/gitlabform
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build
        run: |
          pip install wheel setuptools build
          python -m build
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-ghcr:
    needs:
      - linters
      - tests-standard
      - tests-premium
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          pip install wheel
          pip install packaging
      - name: Get the version from the tag
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Wait for PyPI release
        run: |
          pip download gitlabform==${{ env.VERSION }} > /dev/null
          while [ $? -ne 0 ]; do sleep 10; pip3 download gitlabform==${{ env.VERSION }} > /dev/null ; done
        shell: bash {0}
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/gitlabform/gitlabform
          flavor: |
            latest=auto
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # gitlabform/gitlabform image is going to be here
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          # This token is provided by Actions, you do not need to create your own token
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish image to registries
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: ./dev/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
